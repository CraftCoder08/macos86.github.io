import{r as e,o as n,c as l,a,w as t,F as s,b as r}from"./app.9c75e1c0.js";const i={},o=a("h1",{id:"fixing-trackpads-manual",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#fixing-trackpads-manual","aria-hidden":"true"},"#"),r(" Fixing Trackpads: Manual")],-1),u={class:"table-of-contents"},d=r("# Finding the ACPI path"),h=r("# Edits to the sample SSDT"),p=r("# Compiling the SSDT"),c=r("# Wrapping up"),m=a("h2",{id:"finding-the-acpi-path",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#finding-the-acpi-path","aria-hidden":"true"},"#"),r(" Finding the ACPI path")],-1),b=r("Finding the ACPI pathing is quite easy actually, first open your decompiled DSDT you got from "),g=r("Dumping the DSDT"),f=r(" and "),S=r("Decompiling and Compiling"),x=r(" with either MaciASL(if in macOS) or any other text editor if in Windows or Linux(VSCode has an "),w={href:"https://marketplace.visualstudio.com/items?itemName=Thog.vscode-asl",target:"_blank",rel:"noopener noreferrer"},D=r("ACPI extension"),T=r(" that can also help)."),v=a("p",null,[r("Next search for "),a("code",null,"Device (GPI0)"),r(". Should give you a result similar to this:")],-1),y=a("p",null,[a("img",{src:"/assets/gpi0.bd38d0ac.png",alt:""})],-1),O=a("p",null,[r("What we care about from this is the "),a("code",null,"_STA"),r(" method:")],-1),P=a("div",{class:"language-text ext-text line-numbers-mode"},[a("pre",{class:"language-text"},[a("code",null,"Method (_STA, 0, NotSerialized)\n{\n    If ((GPHD == One))\n    {\n        Return (0x03)\n    }\n\n    Return (0x0F)\n}\n")]),a("div",{class:"line-numbers"},[a("span",{class:"line-number"},"1"),a("br"),a("span",{class:"line-number"},"2"),a("br"),a("span",{class:"line-number"},"3"),a("br"),a("span",{class:"line-number"},"4"),a("br"),a("span",{class:"line-number"},"5"),a("br"),a("span",{class:"line-number"},"6"),a("br"),a("span",{class:"line-number"},"7"),a("br"),a("span",{class:"line-number"},"8"),a("br"),a("span",{class:"line-number"},"9"),a("br")])],-1),G=a("p",null,[r("What we want is for this to always return "),a("code",null,"0x0F"),r(" when booting macOS, so we want to make an SSDT that will return "),a("code",null,"GPHD == Zero"),r(" in macOS.")],-1),k=a("p",null,[a("strong",null,[r("NOTE that you may have the other way around where GPHD needs to be set as "),a("code",null,"One"),r(" to return "),a("code",null,"0x0F")]),r(". And your device name may also be different, don't throw random SSDTs in thinking it'll work")],-1),I=a("p",null,"Here's some more examples:",-1),_=a("p",null,[a("img",{src:"/assets/gpi0-2.d911e9b8.png",alt:""})],-1),C=a("p",null,[r("With this example, we can see that we need both "),a("code",null,"SBRG"),r(" and "),a("code",null,"GPEN"),r(" to return "),a("code",null,"One"),r(". If only one is present, it'll create some issues so in our SSDT we'll want to have both of them return "),a("code",null,"One"),r(":")],-1),F=a("h2",{id:"edits-to-the-sample-ssdt",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#edits-to-the-sample-ssdt","aria-hidden":"true"},"#"),r(" Edits to the sample SSDT")],-1),A=a("p",null,"Now that we have our ACPI path, lets grab our SSDT and get to work:",-1),E={href:"https://github.com/macos86/Getting-Started-With-ACPI/blob/master/extra-files/decompiled/SSDT-GPI0.dsl",target:"_blank",rel:"noopener noreferrer"},N=r("SSDT-GPI0.dsl"),W=a("p",null,[r("From the second example, we'll want to set both GPEN and SBRG to "),a("code",null,"One"),r(" to allow it to operate in macOS:")],-1),R=a("p",null,[a("strong",null,"Before"),r(":")],-1),B=a("div",{class:"language-text ext-text line-numbers-mode"},[a("pre",{class:"language-text"},[a("code",null,'If (_OSI ("Darwin"))\n{\n    GPEN = One <- Proper variables\n}\n')]),a("div",{class:"line-numbers"},[a("span",{class:"line-number"},"1"),a("br"),a("span",{class:"line-number"},"2"),a("br"),a("span",{class:"line-number"},"3"),a("br"),a("span",{class:"line-number"},"4"),a("br")])],-1),H=a("p",null,[a("img",{src:"/assets/ssdt-before.5bebb07b.png",alt:""})],-1),L=a("p",null,"Following the example pathing we found, the SSDT should look something like this:",-1),j=a("p",null,[a("strong",null,"After"),r(":")],-1),M=a("div",{class:"language-text ext-text line-numbers-mode"},[a("pre",{class:"language-text"},[a("code",null,'\nExternal(GPEN, FieldUnitObj) <- Declare the right variables\nExternal(SBRG, FieldUnitObj) <- Declare the right variables\n\nScope (\\)\n{\n    If (_OSI ("Darwin"))\n    {\n        GPEN = One <- Change to the right variables\n        SBRG = One <- Change to the right variables\n    }\n')]),a("div",{class:"line-numbers"},[a("span",{class:"line-number"},"1"),a("br"),a("span",{class:"line-number"},"2"),a("br"),a("span",{class:"line-number"},"3"),a("br"),a("span",{class:"line-number"},"4"),a("br"),a("span",{class:"line-number"},"5"),a("br"),a("span",{class:"line-number"},"6"),a("br"),a("span",{class:"line-number"},"7"),a("br"),a("span",{class:"line-number"},"8"),a("br"),a("span",{class:"line-number"},"9"),a("br"),a("span",{class:"line-number"},"10"),a("br"),a("span",{class:"line-number"},"11"),a("br")])],-1),U=a("p",null,[a("img",{src:"/assets/ssdt-after.8f974de7.png",alt:""})],-1),q=a("h2",{id:"compiling-the-ssdt",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#compiling-the-ssdt","aria-hidden":"true"},"#"),r(" Compiling the SSDT")],-1),z=r("With the SSDT done, you're now "),V=r("ready to compile the SSDT!"),Z=a("h2",{id:"wrapping-up",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#wrapping-up","aria-hidden":"true"},"#"),r(" Wrapping up")],-1),J=a("p",null,"Once you're done making your SSDT, either head to the next page to finish the rest of the SSDTs or head here if you're ready to wrap up:",-1),K=a("strong",null,"Cleanup",-1);i.render=function(r,i){const Q=e("RouterLink"),X=e("OutboundLink");return n(),l(s,null,[o,a("nav",u,[a("ul",null,[a("li",null,[a(Q,{to:"#finding-the-acpi-path"},{default:t((()=>[d])),_:1})]),a("li",null,[a(Q,{to:"#edits-to-the-sample-ssdt"},{default:t((()=>[h])),_:1})]),a("li",null,[a(Q,{to:"#compiling-the-ssdt"},{default:t((()=>[p])),_:1})]),a("li",null,[a(Q,{to:"#wrapping-up"},{default:t((()=>[c])),_:1})])])]),m,a("p",null,[b,a(Q,{to:"/dump.html"},{default:t((()=>[g])),_:1}),f,a(Q,{to:"/compile.html"},{default:t((()=>[S])),_:1}),x,a("a",w,[D,a(X)]),T]),v,y,O,P,G,k,I,_,C,F,A,a("ul",null,[a("li",null,[a("a",E,[N,a(X)])])]),W,R,B,H,L,j,M,U,q,a("p",null,[z,a(Q,{to:"/compile.html"},{default:t((()=>[V])),_:1})]),Z,J,a("ul",null,[a("li",null,[a(Q,{to:"/cleanup.html"},{default:t((()=>[K])),_:1})])])],64)};export default i;
