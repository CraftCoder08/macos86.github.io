import{r as e,o as l,c as n,a,w as t,F as i,b as o}from"./app.9c75e1c0.js";const r={},s=a("h1",{id:"fixing-embedded-controllers-manual",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#fixing-embedded-controllers-manual","aria-hidden":"true"},"#"),o(" Fixing Embedded Controllers: Manual")],-1),d={class:"table-of-contents"},u=o("# Finding the ACPI path"),h=o("# DSDT"),p=o("# DeviceManager"),c=o("# Edits to the sample SSDT"),m=o("# Edge Cases"),g=o("# Multiple PNP0C09's show up"),f=o("# No PNP0C09 show up"),S=o("# PNP0C09 already named EC"),C=o("# PNP0C09 already has an _STA method"),b=o("# Compiling the SSDT"),P=o("# Wrapping up"),w=a("p",null,"TO-DO:",-1),y=a("ul",null,[a("li",null,"Finish Edge cases and sample SSDT edits")],-1),D=a("h2",{id:"finding-the-acpi-path",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#finding-the-acpi-path","aria-hidden":"true"},"#"),o(" Finding the ACPI path")],-1),T=a("p",null,"To find the ACPI pathing, you have 2 methods:",-1),E=a("ul",null,[a("li",null,[a("a",{href:"#DSDT"},"DSDT")]),a("li",null,[a("a",{href:"#devicemanager"},"DeviceManager")])],-1),v=a("h3",{id:"dsdt",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#dsdt","aria-hidden":"true"},"#"),o(" DSDT")],-1),x=o("Finding the ACPI pathing is quite easy actually, first open your decompiled DSDT you got from "),_=o("Dumping the DSDT"),N=o(" and "),k=o("Decompiling and Compiling"),I=o(" with either MaciASL(if in macOS) or any other text editor if in Windows or Linux(VSCode has an "),A={href:"https://marketplace.visualstudio.com/items?itemName=Thog.vscode-asl",target:"_blank",rel:"noopener noreferrer"},O=o("ACPI extension"),B=o(" that can also help)."),L=a("p",null,[o("Next, search for "),a("code",null,"PNP0C09"),o(". You should get something similar:")],-1),M=a("p",null,[a("img",{src:"/assets/pnp.0fe1a888.png",alt:""})],-1),F=a("p",null,"From the above example we see 2 main things:",-1),W=a("ul",null,[a("li",null,[o("Name of our embedded controller "),a("ul",null,[a("li",null,[o("In this case being "),a("code",null,"EC0")])])]),a("li",null,[o("Pathing of our embedded controller "),a("ul",null,[a("li",null,[a("code",null,"PC00.LPC0")])])])],-1),R=a("p",null,"But now we get into edge case territory, what fun!",-1),U=a("p",null,"The main ones to check for are:",-1),X=a("ul",null,[a("li",null,[a("a",{href:"#fixing-embedded-controllers-manual"},"Fixing Embedded Controllers: Manual"),a("ul",null,[a("li",null,[a("a",{href:"#finding-the-acpi-path"},"Finding the ACPI path"),a("ul",null,[a("li",null,[a("a",{href:"#dsdt"},"DSDT")]),a("li",null,[a("a",{href:"#devicemanager"},"DeviceManager")])])]),a("li",null,[a("a",{href:"#edits-to-the-sample-ssdt"},"Edits to the sample SSDT")]),a("li",null,[a("a",{href:"#edge-cases"},"Edge Cases"),a("ul",null,[a("li",null,[a("a",{href:"#multiple-pnp0c09s-show-up"},"Multiple PNP0C09's show up")]),a("li",null,[a("a",{href:"#no-pnp0c09-show-up"},"No PNP0C09 show up")]),a("li",null,[a("a",{href:"#pnp0c09-already-named-ec"},[o("PNP0C09 already named "),a("code",null,"EC")])]),a("li",null,[a("a",{href:"#pnp0c09-already-has-an-_sta-method"},[o("PNP0C09 already has an "),a("code",null,"_STA"),o(" method")])])])]),a("li",null,[a("a",{href:"#compiling-the-ssdt"},"Compiling the SSDT")]),a("li",null,[a("a",{href:"#wrapping-up"},"Wrapping up")])])])],-1),H=a("p",null,"If none of the above apply to you, you're ready for the next section:",-1),j=a("h3",{id:"devicemanager",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#devicemanager","aria-hidden":"true"},"#"),o(" DeviceManager")],-1),G=a("p",null,"If you already have Windows installed on this machine, finding the EC pathing is fairly easy.",-1),Y=a("p",null,[o("Start by opening up Device Manager in Windows and looking for a device named "),a("code",null,"Embedded Controller"),o(". Once found, click on it and select the "),a("code",null,"BIOS device Name"),o(" entry. You should get something like this:")],-1),q=a("p",null,[a("img",{src:"/assets/ec.c7d3c5d4.png",alt:""})],-1),J=a("p",null,[o("From the above, we can see that our pathing is "),a("code",null,"SB.PC00.LPC0.EC0")],-1),V=a("p",null,[o("Now with the pathing, you can head here: "),a("a",{href:"#edits-to-the-sample-ssdt"},"Edits to the sample SSDT")],-1),z=a("h2",{id:"edits-to-the-sample-ssdt",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#edits-to-the-sample-ssdt","aria-hidden":"true"},"#"),o(" Edits to the sample SSDT")],-1),K=a("p",null,"Now that we have our ACPI path, lets grab our SSDT and get to work:",-1),Q={href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-EC-USBX.dsl",target:"_blank",rel:"noopener noreferrer"},Z=o("SSDT-EC-USBX"),$=a("ul",null,[a("li",null,"For Skylake and newer and all AMD systems")],-1),ee={href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-EC.dsl",target:"_blank",rel:"noopener noreferrer"},le=o("SSDT-EC"),ne=a("ul",null,[a("li",null,"For Broadwell and older")],-1),ae=a("p",null,"Now when opening this SSDT, you'll notice a few things. Mainly:",-1),te=a("ul",null,[a("li",null,[o("Some code is commented out "),a("ul",null,[a("li",null,"This is code for disabling our EC"),a("li",null,[o("Laptops users "),a("strong",null,"SHOULD NOT"),o(" uncomment this")])])]),a("li",null,[o("There's a new EC called "),a("code",null,"Device (EC)"),a("ul",null,[a("li",null,[a("strong",null,"DO NOT RENAME THIS"),o(", this will be the EC we give to macOS")])])])],-1),ie=a("p",null,[a("strong",null,"Before"),o(":")],-1),oe=a("div",{class:"language-text ext-text line-numbers-mode"},[a("pre",{class:"language-text"},[a("code",null,"External (_SB_.PCI0.LPCB, DeviceObj) <- Rename this\n\nScope (_SB.PCI0.LPCB) <- Rename this\n")]),a("div",{class:"line-numbers"},[a("span",{class:"line-number"},"1"),a("br"),a("span",{class:"line-number"},"2"),a("br"),a("span",{class:"line-number"},"3"),a("br")])],-1),re=a("p",null,[a("img",{src:"/assets/ssdt-before.662e40aa.png",alt:""})],-1),se=a("p",null,"Following the example pathing we found, the SSDT should look something like this:",-1),de=a("p",null,[a("strong",null,"After"),o(":")],-1),ue=a("div",{class:"language-text ext-text line-numbers-mode"},[a("pre",{class:"language-text"},[a("code",null,"External (_SB_.PC00.LPC0, DeviceObj) <- Renamed\n\nScope (_SB.PC00.LPC0) <- Renamed\n")]),a("div",{class:"line-numbers"},[a("span",{class:"line-number"},"1"),a("br"),a("span",{class:"line-number"},"2"),a("br"),a("span",{class:"line-number"},"3"),a("br")])],-1),he=a("p",null,[a("img",{src:"/assets/ssdt-after.c7067e6e.png",alt:""})],-1),pe=a("h2",{id:"edge-cases",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#edge-cases","aria-hidden":"true"},"#"),o(" Edge Cases")],-1),ce=a("h3",{id:"multiple-pnp0c09-s-show-up",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#multiple-pnp0c09-s-show-up","aria-hidden":"true"},"#"),o(" Multiple PNP0C09's show up")],-1),me=a("p",null,"When multiple PNP0C09 show up, we need to next check for the following properties:",-1),ge=a("ul",null,[a("li",null,[a("code",null,"_HID"),o(" (Hardware ID)")]),a("li",null,[a("code",null,"_CRS"),o(" (Current Resource Settings)")]),a("li",null,[a("code",null,"_GPE"),o(" (General Purpose Events)")])],-1),fe=o("What these signify is whether this PNP0C09 device is real or not, as per the "),Se={href:"https://uefi.org/sites/default/files/resources/ACPI_6_3_final_Jan30.pdf",target:"_blank",rel:"noopener noreferrer"},Ce=o("ACPI spec"),be=o(". So one's matching the above criteria are the one's we want to disable."),Pe=a("ul",null,[a("li",null,[o("Note: If _STA shows up as well, you'll need to go here: "),a("a",{href:"#pnp0c09-already-has-an-sta-method"},[o("PNP0C09 already has an "),a("code",null,"_STA"),o(" method")])])],-1),we=a("h3",{id:"no-pnp0c09-show-up",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#no-pnp0c09-show-up","aria-hidden":"true"},"#"),o(" No PNP0C09 show up")],-1),ye=a("p",null,'When this happens, you\'ll only need to create a "dummy" EC for macOS.',-1),De=a("p",null,'Try searching for any devices named: "LPCB", "LPC0", "LPC", "SBRG", "PX40". If you have any of these, try using the LPC pathing of each of those device in place of the Embedded Controller\'s pathing.',-1),Te=a("p",null,[o("Note that "),a("strong",null,"DO NOT"),o(' uncomment the EC disabling code as there are no devices that are considered "EC" in your machine.')],-1),Ee=a("h3",{id:"pnp0c09-already-named-ec",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#pnp0c09-already-named-ec","aria-hidden":"true"},"#"),o(" PNP0C09 already named "),a("code",null,"EC")],-1),ve=a("p",null,"Congrats! No need to create an SSDT-EC! However you will still want USBX if you're Skylake or newer.",-1),xe=o("Prebuilt can be grabbed here: "),_e={href:"https://github.com/macos86/OpenCore-Post-Install/blob/master/extra-files/SSDT-USBX.aml",target:"_blank",rel:"noopener noreferrer"},Ne=o("SSDT-USBX.aml"),ke=a("h3",{id:"pnp0c09-already-has-an-sta-method",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#pnp0c09-already-has-an-sta-method","aria-hidden":"true"},"#"),o(" PNP0C09 already has an "),a("code",null,"_STA"),o(" method")],-1),Ie=a("p",null,"This is the equivalent of not having an EC as we can't control it with our SSDT-EC, instead we'll need to create a \"dummy\" EC for macOS. You'll still want to find the PCI and LPC pathing for this device. So follow the guide as if you were creating a laptop SSDT-EC/USBX.",-1),Ae=a("p",null,"Example of an EC with STA already:",-1),Oe=a("p",null,[a("img",{src:"/assets/sta.597d3123.png",alt:"Credit to rottenpants466"})],-1),Be=a("h2",{id:"compiling-the-ssdt",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#compiling-the-ssdt","aria-hidden":"true"},"#"),o(" Compiling the SSDT")],-1),Le=o("With the SSDT done, you're now "),Me=o("ready to compile the SSDT!"),Fe=a("h2",{id:"wrapping-up",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#wrapping-up","aria-hidden":"true"},"#"),o(" Wrapping up")],-1),We=a("p",null,"Once you're done making your SSDT, either head to the next page to finish the rest of the SSDTs or head here if you're ready to wrap up:",-1),Re=a("strong",null,"Cleanup",-1);r.render=function(o,r){const Ue=e("RouterLink"),Xe=e("OutboundLink");return l(),n(i,null,[s,a("nav",d,[a("ul",null,[a("li",null,[a(Ue,{to:"#finding-the-acpi-path"},{default:t((()=>[u])),_:1}),a("ul",null,[a("li",null,[a(Ue,{to:"#dsdt"},{default:t((()=>[h])),_:1})]),a("li",null,[a(Ue,{to:"#devicemanager"},{default:t((()=>[p])),_:1})])])]),a("li",null,[a(Ue,{to:"#edits-to-the-sample-ssdt"},{default:t((()=>[c])),_:1})]),a("li",null,[a(Ue,{to:"#edge-cases"},{default:t((()=>[m])),_:1}),a("ul",null,[a("li",null,[a(Ue,{to:"#multiple-pnp0c09-s-show-up"},{default:t((()=>[g])),_:1})]),a("li",null,[a(Ue,{to:"#no-pnp0c09-show-up"},{default:t((()=>[f])),_:1})]),a("li",null,[a(Ue,{to:"#pnp0c09-already-named-ec"},{default:t((()=>[S])),_:1})]),a("li",null,[a(Ue,{to:"#pnp0c09-already-has-an-sta-method"},{default:t((()=>[C])),_:1})])])]),a("li",null,[a(Ue,{to:"#compiling-the-ssdt"},{default:t((()=>[b])),_:1})]),a("li",null,[a(Ue,{to:"#wrapping-up"},{default:t((()=>[P])),_:1})])])]),w,y,D,T,E,v,a("p",null,[x,a(Ue,{to:"/dump.html"},{default:t((()=>[_])),_:1}),N,a(Ue,{to:"/compile.html"},{default:t((()=>[k])),_:1}),I,a("a",A,[O,a(Xe)]),B]),L,M,F,W,R,U,X,H,j,G,Y,q,J,V,z,K,a("ul",null,[a("li",null,[a("a",Q,[Z,a(Xe)]),$]),a("li",null,[a("a",ee,[le,a(Xe)]),ne])]),ae,te,ie,oe,re,se,de,ue,he,pe,ce,me,ge,a("p",null,[fe,a("a",Se,[Ce,a(Xe)]),be]),Pe,we,ye,De,Te,Ee,ve,a("p",null,[xe,a("a",_e,[Ne,a(Xe)])]),ke,Ie,Ae,Oe,Be,a("p",null,[Le,a(Ue,{to:"/compile.html"},{default:t((()=>[Me])),_:1})]),Fe,We,a("ul",null,[a("li",null,[a(Ue,{to:"/cleanup.html"},{default:t((()=>[Re])),_:1})])])],64)};export default r;
