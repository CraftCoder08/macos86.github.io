import{r as e,o as l,c as t,a as n,w as a,F as i,b as o}from"./app.9c75e1c0.js";import{_ as s,a as r}from"./pci0.3fd67303.js";const u={},h=n("h1",{id:"fixing-system-clocks-manual",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fixing-system-clocks-manual","aria-hidden":"true"},"#"),o(" Fixing System Clocks: Manual")],-1),d={class:"table-of-contents"},c=o("# Determining which SSDT you need"),p=o("# RTC0 Method"),m=o("# Finding the ACPI path"),g=o("# Edits to the sample SSDT"),f=o("# Compiling the SSDT"),S=o("# Wrapping up"),b=n("h2",{id:"determining-which-ssdt-you-need",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#determining-which-ssdt-you-need","aria-hidden":"true"},"#"),o(" Determining which SSDT you need")],-1),C=n("strong",null,"Note",-1),w=o(": X99 and X299 see "),y=o("here"),P=o("Finding which SSDT you need is quite easy actually, first open your decompiled DSDT you got from "),T=o("Dumping the DSDT"),x=o(" and "),D=o("Decompiling and Compiling"),A=o(" with either MaciASL(if in macOS) or any other text editor if in Windows or Linux(VSCode has an "),_={href:"https://marketplace.visualstudio.com/items?itemName=Thog.vscode-asl",target:"_blank",rel:"noopener noreferrer"},v=o("ACPI extension"),k=o(" that can also help)."),I=n("p",null,[o("Next search for "),n("code",null,"ACPI000E"),o(". You should get something similar:")],-1),B=n("p",null,[n("img",{src:"/assets/ACPI000E.ada29f37.png",alt:""})],-1),L=n("p",null,"The above tells us a few things:",-1),R=n("ul",null,[n("li",null,[o("We in fact do have an AWAC clock "),n("ul",null,[n("li",null,"If nothing shows up, you don't need to do anything for AWAC or RTC")])]),n("li",null,[o("It can be easily disabled with STAS(if not, you can skip to here: "),n("a",{href:"#rtc0-method"},"RTC0 Method"),o(") "),n("ul",null,[n("li",null,[n("code",null,"_STA"),o(" is the device status, with "),n("code",null,"Zero"),o(" meaning it won't show up")])])])],-1),W=n("p",null,[o("But to double check, next search for "),n("code",null,"PNP0B00"),o(":")],-1),F=n("p",null,[n("img",{src:"/assets/PNP0B00.fe0305b9.png",alt:""})],-1),N=n("p",null,[o("And looks at that, we can in fact disable our AWAC and enable the RTC! If not skip to here: "),n("a",{href:"#rtc0-method"},"RTC0 Method")],-1),E=o("Now it's as simple as grabbing "),O={href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-AWAC-DISABLE.dsl",target:"_blank",rel:"noopener noreferrer"},M=o("SSDT-AWAC.dsl"),j=o(" and "),Y=n("a",{href:"#compiling-the-ssdt"},"compile",-1),X=o(", no changes needed You can also use the below SSDT to the same effect:"),q={href:"https://github.com/macos86/Getting-Started-With-ACPI/blob/master/extra-files/compiled/SSDT-AWAC.aml",target:"_blank",rel:"noopener noreferrer"},G=o("SSDT-AWAC.aml"),U=n("h2",{id:"rtc0-method",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rtc0-method","aria-hidden":"true"},"#"),o(" RTC0 Method")],-1),V=n("p",null,[o("This method is for those who either don't have a "),n("code",null,"PNP0B00"),o(" device to re-enable or have no easy way(via STAS variable).")],-1),Z=n("h3",{id:"finding-the-acpi-path",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#finding-the-acpi-path","aria-hidden":"true"},"#"),o(" Finding the ACPI path")],-1),z=n("p",null,"Assuming you've gotten your DSDT already opened from earlier, search for the following:",-1),H=n("ul",null,[n("li",null,[o("Finding the LowPinCount path: "),n("ul",null,[n("li",null,[o("Search "),n("code",null,"Name (_ADR, 0x001F0000)")])])]),n("li",null,[o("Finding the PCI path: "),n("ul",null,[n("li",null,[o("Search "),n("code",null,"PNP0A08"),o(" (If multiple show up, use the first one)")])])])],-1),J=n("p",null,"You should get something like the following show up:",-1),K=n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"LPC Pathing"),n("th",{style:{"text-align":"center"}},"PCI Pathing")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"center"}},[n("img",{src:s,alt:""})]),n("td",{style:{"text-align":"center"}},[n("img",{src:r,alt:""})])])])],-1),Q=n("p",null,[o("From the above, we can see we have both "),n("code",null,"PCI0"),o(" and "),n("code",null,"LPC"),o(". Now we can head to the next stage")],-1),$=n("h3",{id:"edits-to-the-sample-ssdt",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#edits-to-the-sample-ssdt","aria-hidden":"true"},"#"),o(" Edits to the sample SSDT")],-1),ee=n("p",null,"Now that we have our ACPI path, lets grab our SSDT and get to work:",-1),le={href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-RTC0.dsl",target:"_blank",rel:"noopener noreferrer"},te=o("SSDT-RTC0.dsl"),ne=n("p",null,[o("By default, this uses "),n("code",null,"PCI0.LPCB"),o(" for the pathing. you'll want to rename accordingly.")],-1),ae=n("p",null,[o("Following the example from above, we'll be renaming it to "),n("code",null,"PCI0.LPC"),o(":")],-1),ie=n("p",null,[n("strong",null,"Before"),o(":")],-1),oe=n("div",{class:"language-text ext-text line-numbers-mode"},[n("pre",{class:"language-text"},[n("code",null,"External (_SB_.PCI0.LPCB, DeviceObj) <- Rename this\n\nScope (_SB.PCI0.LPCB) <- Rename this\n")]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br")])],-1),se=n("p",null,[n("img",{src:"/assets/ssdt-before.62974d74.png",alt:""})],-1),re=n("p",null,"Following the example pathing we found, the SSDT should look something like this:",-1),ue=n("p",null,[n("strong",null,"After"),o(":")],-1),he=n("div",{class:"language-text ext-text line-numbers-mode"},[n("pre",{class:"language-text"},[n("code",null,"External (_SB_.PCI0.LPC, DeviceObj) <- Renamed\n\nScope (_SB.PCI0.LPC) <- Renamed\n")]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br")])],-1),de=n("p",null,[n("img",{src:"/assets/ssdt-after.bd1ecb9f.png",alt:""})],-1),ce=n("h3",{id:"compiling-the-ssdt",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#compiling-the-ssdt","aria-hidden":"true"},"#"),o(" Compiling the SSDT")],-1),pe=o("With the SSDT done, you're now "),me=o("ready to compile the SSDT!"),ge=n("h2",{id:"wrapping-up",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#wrapping-up","aria-hidden":"true"},"#"),o(" Wrapping up")],-1),fe=n("p",null,"Once you're done making your SSDT, either head to the next page to finish the rest of the SSDTs or head here if you're ready to wrap up:",-1),Se=n("strong",null,"Cleanup",-1);u.render=function(o,s){const r=e("RouterLink"),u=e("OutboundLink");return l(),t(i,null,[h,n("nav",d,[n("ul",null,[n("li",null,[n(r,{to:"#determining-which-ssdt-you-need"},{default:a((()=>[c])),_:1})]),n("li",null,[n(r,{to:"#rtc0-method"},{default:a((()=>[p])),_:1}),n("ul",null,[n("li",null,[n(r,{to:"#finding-the-acpi-path"},{default:a((()=>[m])),_:1})]),n("li",null,[n(r,{to:"#edits-to-the-sample-ssdt"},{default:a((()=>[g])),_:1})]),n("li",null,[n(r,{to:"#compiling-the-ssdt"},{default:a((()=>[f])),_:1})])])]),n("li",null,[n(r,{to:"#wrapping-up"},{default:a((()=>[S])),_:1})])])]),b,n("ul",null,[n("li",null,[C,w,n(r,{to:"/Universal/awac/manual-hedt.html"},{default:a((()=>[y])),_:1})])]),n("p",null,[P,n(r,{to:"/dump.html"},{default:a((()=>[T])),_:1}),x,n(r,{to:"/compile.html"},{default:a((()=>[D])),_:1}),A,n("a",_,[v,n(u)]),k]),I,B,L,R,W,F,N,n("p",null,[E,n("a",O,[M,n(u)]),j,Y,X]),n("ul",null,[n("li",null,[n("a",q,[G,n(u)])])]),U,V,Z,z,H,J,K,Q,$,ee,n("ul",null,[n("li",null,[n("a",le,[te,n(u)])])]),ne,ae,ie,oe,se,re,ue,he,de,ce,n("p",null,[pe,n(r,{to:"/compile.html"},{default:a((()=>[me])),_:1})]),ge,fe,n("ul",null,[n("li",null,[n(r,{to:"/cleanup.html"},{default:a((()=>[Se])),_:1})])])],64)};export default u;
