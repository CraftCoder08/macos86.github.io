import{r as e,o as t,c as l,a as n,w as i,F as o,b as a,d as r}from"./app.9c75e1c0.js";import{_ as s}from"./DP-no-igpu.785387d0.js";import{_ as d,a as u,b as c}from"./kernel.bb421773.js";import{_ as h}from"./misc.60def712.js";import{_ as p}from"./nvram.9d92e854.js";import{_ as g}from"./iMacPro-smbios.86be12d7.js";import{_ as f}from"./aptio-v-uefi.15c2afe2.js";const m={},b=n("h1",{id:"ryzen-e-threadripper-17°-and-19°",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ryzen-e-threadripper-17°-and-19°","aria-hidden":"true"},"#"),a(" Ryzen e Threadripper(17° and 19°)")],-1),y=n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Supporto"),n("th",{style:{"text-align":"left"}},"Versione")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"left"}},"Supporto di macOS iniziale"),n("td",{style:{"text-align":"left"}},"macOS 10.13, High Sierra")])])],-1),x=n("h2",{id:"punto-d-inizio",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#punto-d-inizio","aria-hidden":"true"},"#"),a(" Punto d'Inizio")],-1),S=n("p",null,"Fare un config.plist potrebbe sembrare difficile, ma non lo è. Ci metterai solo un po' di tempo ma questa guida ti dice come configurare il tutto, non rimarrai a bocca asciutta. Questo significa anche che se hai problemi, rivedi come hai impostato il config per essere sicuro che siano corrette. Le cose principali da definire con OpenCore:",-1),v=n("ul",null,[n("li",null,[n("strong",null,"Tutte le proprietà devono essere definite"),a(", non c'è un fallback di default, perciò "),n("strong",null,"non cancellare sezioni a meno che non ti sia esplicitamente richiesto"),a(". Se la guida non parla di quella sezione, lascia come il predefinito.")]),n("li",null,[n("strong",null,"Il Sample.plist non può essere usato così com'è"),a(", devi configurarlo per il tuo sistema")]),n("li",null,[n("strong",null,"NON USARE CONFIGURATORI"),a(", questi raramente rispettano la configurazione di OpenCore e alcuni di quelli come Mackie aggiungeranno proprietà di Clover o potrebbero corrompere il plist!")])],-1),w=n("p",null,"Ora che hai letto questo, un piccolo reminder degli strumenti necessari",-1),k={href:"https://github.com/corpnewt/ProperTree",target:"_blank",rel:"noopener noreferrer"},A=a("ProperTree"),O=n("ul",null,[n("li",null,"Plist editor universale")],-1),C={href:"https://github.com/corpnewt/GenSMBIOS",target:"_blank",rel:"noopener noreferrer"},M=a("GenSMBIOS"),I=n("ul",null,[n("li",null,"Per geneare i dati del nostro SMBIOS")],-1),P={href:"https://github.com/acidanthera/OpenCorePkg/releases",target:"_blank",rel:"noopener noreferrer"},D=a("Sample/config.plist"),B=a("Vedi la sezione precedente per capire come ottenerlo: "),E=a("Setup del config.plist"),U=n("p",null,[n("strong",null,"E leggi questa guida una volta prima di impostare OpenCore e sii sicuro di aver impostato tutto correttamente. Nota che le immagini non potranno essere sempre aggiornatissime, perciò leggi le didascalie sotto, se nulla viene menzionato, lascia com'è di default.")],-1),T=n("h2",{id:"acpi",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#acpi","aria-hidden":"true"},"#"),a(" ACPI")],-1),R=n("p",null,[n("img",{src:"/assets/acpi.3e8e139c.png",alt:"ACPI"})],-1),N=n("h3",{id:"add",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#add","aria-hidden":"true"},"#"),a(" Add")],-1),F={class:"custom-container tip"},_=n("p",{class:"custom-container-title"},"Informazioni",-1),q=a("Qui aggiungerai i tuoi SSDT al sistema, sono molto importanti per "),G=n("strong",null,"avviare macOS",-1),L=a(" e hanno molti usi come "),Y=a("USB maps (EN)"),V=a(", "),K=a("disabilitare GPU non supportate"),H=a(" e altro. E con il nostro sistema, "),z=n("strong",null,"è soprattutto richiesto per l'avvio",-1),X=a(". Guide per farli può essere trovata qui: "),W=a("Iniziamo con ACPI"),Q=r('<p>Nota che <strong>non dovresti</strong> aggiungere <code>DSDT.aml</code> qui, è aggiunto già dal tuo firmware. Perciò se presente, toglilo dal tuo <code>config.plist</code> e da EFI/OC/ACPI.</p><p>Gli SSDT hanno l&#39;estensione <strong>.aml</strong> (Assembled) e andranno dentro la cartella <code>EFI/OC/ACPI</code> e <strong>devono</strong> essere specificati nel config anche nella sezione <code>ACPI -&gt; Add</code>.</p><table><thead><tr><th style="text-align:left;">SSDT Richiesti</th><th style="text-align:left;">Descrizione</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>SSDT-EC-USBX</strong></td><td style="text-align:left;">Sistema il controller integrato e l&#39;energia dei USB</td></tr><tr><td style="text-align:left;"><strong>SSDT-CPUR</strong></td><td style="text-align:left;">Sistema le definizioni della CPU nelle schede madri B550 e A520, <strong>non usarli</strong> se hai un sistema AMD B550 o A520.</td></tr></tbody></table>',3),j=n("h3",{id:"delete",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#delete","aria-hidden":"true"},"#"),a(" Delete")],-1),J=n("p",null,"Questa sezione previene il caricamento di certe tabelle ACPI, per noi è ignorabile.",-1),Z=n("h3",{id:"patch",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#patch","aria-hidden":"true"},"#"),a(" Patch")],-1),$=n("p",null,"Questa sezione ci permette di modificare dinamicamente le parti di ACPI (DSDT, SSDT, ecc.) tramite OpenCore. Per noi, le nostre patch sono legate agli SSDT. Questa è una soluzione più pulita perché ci permetterà di avviare Windows e altri sistemi con OpenCore",-1),ee=n("h3",{id:"quirks",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#quirks","aria-hidden":"true"},"#"),a(" Quirks")],-1),te=n("p",null,"Impostazioni relative a ACPI, lascia tutto come default dato che non useremo questi quirk.",-1),le=n("h2",{id:"booter",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#booter","aria-hidden":"true"},"#"),a(" Booter")],-1),ne=n("p",null,[n("img",{src:"/assets/amd-zen-booter.b434112c.png",alt:"Booter"})],-1),ie=n("p",null,"This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi",-1),oe=n("h3",{id:"mmiowhitelist",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mmiowhitelist","aria-hidden":"true"},"#"),a(" MmioWhitelist")],-1),ae=n("p",null,[a("This section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with "),n("code",null,"DevirtualiseMmio")],-1),re=n("h3",{id:"quirks-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#quirks-1","aria-hidden":"true"},"#"),a(" Quirks")],-1),se=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"Info"),n("p",null,"Settings relating to boot.efi patching and firmware fixes, for us, we need to change the following:"),n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Quirk"),n("th",{style:{"text-align":"left"}},"Enabled"),n("th",{style:{"text-align":"left"}},"Comment")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"left"}},"DevirtualiseMmio"),n("td",{style:{"text-align":"left"}},"NO"),n("td",{style:{"text-align":"left"}},"Note TRx40 requires this flag")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"EnableWriteUnprotector"),n("td",{style:{"text-align":"left"}},"NO"),n("td",{style:{"text-align":"left"}})]),n("tr",null,[n("td",{style:{"text-align":"left"}},"RebuildAppleMemoryMap"),n("td",{style:{"text-align":"left"}},"YES"),n("td",{style:{"text-align":"left"}})]),n("tr",null,[n("td",{style:{"text-align":"left"}},"SetupVirtualMap"),n("td",{style:{"text-align":"left"}},"YES"),n("td",{style:{"text-align":"left"}},[a("- Note B550, A520 and TRx40 boards should disable this. Newer BIOS versions of X570 also require this off"),n("br"),a("- X470 and B450 with late 2020 BIOS updates also require this disabled")])]),n("tr",null,[n("td",{style:{"text-align":"left"}},"SyncRuntimePermissions"),n("td",{style:{"text-align":"left"}},"YES"),n("td",{style:{"text-align":"left"}})])])])],-1),de={class:"custom-container details"},ue=n("summary",null,"More in-depth Info",-1),ce=n("li",null,[n("strong",null,"AvoidRuntimeDefrag"),a(": YES "),n("ul",null,[n("li",null,"Fixes UEFI runtime services like date, time, NVRAM, power control, etc")])],-1),he=n("li",null,[n("strong",null,"EnableSafeModeSlide"),a(": YES "),n("ul",null,[n("li",null,"Enables slide variables to be used in safe mode.")])],-1),pe=n("strong",null,"EnableWriteUnprotector",-1),ge=a(": NO "),fe=n("li",null,"This quirk and RebuildAppleMemoryMap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.",-1),me=a("However, due to issues with OEMs not using the latest EDKII builds you may find that the above combo will result in early boot failures. This is due to missing the "),be=n("code",null,"MEMORY_ATTRIBUTE_TABLE",-1),ye=a(" and such we recommend disabling RebuildAppleMemoryMap and enabling EnableWriteUnprotector. More info on this is covered in the "),xe=a("troubleshooting section"),Se=r("<li><strong>ProvideCustomSlide</strong>: YES <ul><li>Used for Slide variable calculation. However the necessity of this quirk is determined by <code>OCABC: Only N/256 slide values are usable!</code> message in the debug log. If the message <code>OCABC: All slides are usable! You can disable ProvideCustomSlide!</code> is present in your log, you can disable <code>ProvideCustomSlide</code>.</li></ul></li><li><strong>RebuildAppleMemoryMap</strong>: YES <ul><li>Generates Memory Map compatible with macOS, can break on some laptop OEM firmwares so if you receive early boot failures disable this</li></ul></li><li><strong>SetupVirtualMap</strong>: YES <ul><li>Fixes SetVirtualAddresses calls to virtual addresses</li><li>B550, A520 and TRx40 boards should disable this quirk</li></ul></li><li><strong>SyncRuntimePermissions</strong>: YES <ul><li>Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for RebuildAppleMemoryMap users</li></ul></li>",4),ve=n("h2",{id:"deviceproperties",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#deviceproperties","aria-hidden":"true"},"#"),a(" DeviceProperties")],-1),we=n("p",null,[n("img",{src:s,alt:"DeviceProperties"})],-1),ke=n("h3",{id:"add-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#add-1","aria-hidden":"true"},"#"),a(" Add")],-1),Ae=n("p",null,"Sets device properties from a map.",-1),Oe=n("p",null,"By default, the Sample.plist has this section set for Audio. We'll be setting Audio the layout in the Argomenti di avvio section, for us we can ignore this",-1),Ce=n("h3",{id:"delete-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#delete-1","aria-hidden":"true"},"#"),a(" Delete")],-1),Me=n("p",null,"Removes device properties from the map, for us we can ignore this",-1),Ie=n("h2",{id:"kernel",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#kernel","aria-hidden":"true"},"#"),a(" Kernel")],-1),Pe=n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Kernel"),n("th",{style:{"text-align":"left"}},"Kernel Patches")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"left"}},[n("img",{src:d,alt:"Kernel"})]),n("td",{style:{"text-align":"left"}},[n("img",{src:u,alt:""})])])])],-1),De=n("h3",{id:"add-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#add-2","aria-hidden":"true"},"#"),a(" Add")],-1),Be=n("p",null,"Here's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:",-1),Ee={class:"custom-container details"},Ue=n("summary",null,"More in-depth Info",-1),Te=n("p",null,"The main thing you need to keep in mind is:",-1),Re=n("ul",null,[n("li",null,[a("Load order "),n("ul",null,[n("li",null,[a("Remember that any plugins should load "),n("em",null,"after"),a(" its dependencies")]),n("li",null,[a("This means kexts like Lilu "),n("strong",null,"must"),a(" come before VirtualSMC, AppleALC, WhateverGreen, etc")])])])],-1),Ne=a("A reminder that "),Fe={href:"https://github.com/corpnewt/ProperTree",target:"_blank",rel:"noopener noreferrer"},_e=a("ProperTree"),qe=a(" users can run "),Ge=n("strong",null,"Cmd/Ctrl + Shift + R",-1),Le=a(" to add all their kexts in the correct order without manually typing each kext out."),Ye=r('<ul><li><strong>Arch</strong><ul><li>Architectures supported by this kext</li><li>Currently supported values are <code>Any</code>, <code>i386</code> (32-bit), and <code>x86_64</code> (64-bit)</li></ul></li><li><strong>BundlePath</strong><ul><li>Name of the kext</li><li>ex: <code>Lilu.kext</code></li></ul></li><li><strong>Enabled</strong><ul><li>Self-explanatory, either enables or disables the kext</li></ul></li><li><strong>ExecutablePath</strong><ul><li>Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting <code>Show Package Contents</code>. Generally, they&#39;ll be <code>Contents/MacOS/Kext</code> but some have kexts hidden within under <code>Plugin</code> folder. Do note that plist only kexts do not need this filled in.</li><li>ex: <code>Contents/MacOS/Lilu</code></li></ul></li><li><strong>MinKernel</strong><ul><li>Lowest kernel version your kext will be injected into, see below table for possible values</li><li>ex. <code>12.00.00</code> for OS X 10.8</li></ul></li><li><strong>MaxKernel</strong><ul><li>Highest kernel version your kext will be injected into, see below table for possible values</li><li>ex. <code>11.99.99</code> for OS X 10.7</li></ul></li><li><strong>PlistPath</strong><ul><li>Path to the <code>info.plist</code> hidden within the kext</li><li>ex: <code>Contents/Info.plist</code></li></ul></li></ul><details class="custom-container details"><summary>Kernel Support Table</summary><table><thead><tr><th style="text-align:left;">OS X Version</th><th style="text-align:left;">MinKernel</th><th style="text-align:left;">MaxKernel</th></tr></thead><tbody><tr><td style="text-align:left;">10.4</td><td style="text-align:left;">8.0.0</td><td style="text-align:left;">8.99.99</td></tr><tr><td style="text-align:left;">10.5</td><td style="text-align:left;">9.0.0</td><td style="text-align:left;">9.99.99</td></tr><tr><td style="text-align:left;">10.6</td><td style="text-align:left;">10.0.0</td><td style="text-align:left;">10.99.99</td></tr><tr><td style="text-align:left;">10.7</td><td style="text-align:left;">11.0.0</td><td style="text-align:left;">11.99.99</td></tr><tr><td style="text-align:left;">10.8</td><td style="text-align:left;">12.0.0</td><td style="text-align:left;">12.99.99</td></tr><tr><td style="text-align:left;">10.9</td><td style="text-align:left;">13.0.0</td><td style="text-align:left;">13.99.99</td></tr><tr><td style="text-align:left;">10.10</td><td style="text-align:left;">14.0.0</td><td style="text-align:left;">14.99.99</td></tr><tr><td style="text-align:left;">10.11</td><td style="text-align:left;">15.0.0</td><td style="text-align:left;">15.99.99</td></tr><tr><td style="text-align:left;">10.12</td><td style="text-align:left;">16.0.0</td><td style="text-align:left;">16.99.99</td></tr><tr><td style="text-align:left;">10.13</td><td style="text-align:left;">17.0.0</td><td style="text-align:left;">17.99.99</td></tr><tr><td style="text-align:left;">10.14</td><td style="text-align:left;">18.0.0</td><td style="text-align:left;">18.99.99</td></tr><tr><td style="text-align:left;">10.15</td><td style="text-align:left;">19.0.0</td><td style="text-align:left;">19.99.99</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;">20.0.0</td><td style="text-align:left;">20.99.99</td></tr></tbody></table></details>',2),Ve=n("h3",{id:"emulate",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#emulate","aria-hidden":"true"},"#"),a(" Emulate")],-1),Ke=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"Info"),n("p",null,"Needed for spoofing unsupported CPUs like Pentiums and Celerons and to disable CPU power management on unsupported CPUs (such as AMD CPUs)"),n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Quirk"),n("th",{style:{"text-align":"left"}},"Enabled")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"left"}},"DummyPowerManagement"),n("td",{style:{"text-align":"left"}},"YES")])])])],-1),He=n("details",{class:"custom-container details"},[n("summary",null,"More in-depth Info"),n("ul",null,[n("li",null,[n("strong",null,"CpuidMask"),a(": Leave this blank "),n("ul",null,[n("li",null,"Mask for fake CPUID")])]),n("li",null,[n("strong",null,"CpuidData"),a(": Leave this blank "),n("ul",null,[n("li",null,"Fake CPUID entry")])]),n("li",null,[n("strong",null,"DummyPowerManagement"),a(": YES "),n("ul",null,[n("li",null,"New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore")])]),n("li",null,[n("strong",null,"MinKernel"),a(": Leave this blank "),n("ul",null,[n("li",null,"Lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values"),n("li",null,[a("ex. "),n("code",null,"12.00.00"),a(" for OS X 10.8")])])]),n("li",null,[n("strong",null,"MaxKernel"),a(": Leave this blank "),n("ul",null,[n("li",null,"Highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values"),n("li",null,[a("ex. "),n("code",null,"11.99.99"),a(" for OS X 10.7")])])])]),n("details",{class:"custom-container details"},[n("summary",null,"Kernel Support Table"),n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"OS X Version"),n("th",{style:{"text-align":"left"}},"MinKernel"),n("th",{style:{"text-align":"left"}},"MaxKernel")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"left"}},"10.4"),n("td",{style:{"text-align":"left"}},"8.0.0"),n("td",{style:{"text-align":"left"}},"8.99.99")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"10.5"),n("td",{style:{"text-align":"left"}},"9.0.0"),n("td",{style:{"text-align":"left"}},"9.99.99")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"10.6"),n("td",{style:{"text-align":"left"}},"10.0.0"),n("td",{style:{"text-align":"left"}},"10.99.99")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"10.7"),n("td",{style:{"text-align":"left"}},"11.0.0"),n("td",{style:{"text-align":"left"}},"11.99.99")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"10.8"),n("td",{style:{"text-align":"left"}},"12.0.0"),n("td",{style:{"text-align":"left"}},"12.99.99")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"10.9"),n("td",{style:{"text-align":"left"}},"13.0.0"),n("td",{style:{"text-align":"left"}},"13.99.99")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"10.10"),n("td",{style:{"text-align":"left"}},"14.0.0"),n("td",{style:{"text-align":"left"}},"14.99.99")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"10.11"),n("td",{style:{"text-align":"left"}},"15.0.0"),n("td",{style:{"text-align":"left"}},"15.99.99")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"10.12"),n("td",{style:{"text-align":"left"}},"16.0.0"),n("td",{style:{"text-align":"left"}},"16.99.99")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"10.13"),n("td",{style:{"text-align":"left"}},"17.0.0"),n("td",{style:{"text-align":"left"}},"17.99.99")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"10.14"),n("td",{style:{"text-align":"left"}},"18.0.0"),n("td",{style:{"text-align":"left"}},"18.99.99")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"10.15"),n("td",{style:{"text-align":"left"}},"19.0.0"),n("td",{style:{"text-align":"left"}},"19.99.99")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"11"),n("td",{style:{"text-align":"left"}},"20.0.0"),n("td",{style:{"text-align":"left"}},"20.99.99")])])])])],-1),ze=n("h3",{id:"force",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#force","aria-hidden":"true"},"#"),a(" Force")],-1),Xe=n("p",null,"Used for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).",-1),We=n("p",null,"For us, we can ignore.",-1),Qe=n("h3",{id:"block",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#block","aria-hidden":"true"},"#"),a(" Block")],-1),je=n("p",null,"Blocks certain kexts from loading. Not relevant for us.",-1),Je=n("h3",{id:"patch-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#patch-1","aria-hidden":"true"},"#"),a(" Patch")],-1),Ze=a("This is where the AMD kernel patching magic happens. Please do note that "),$e=n("code",null,"KernelToPatch",-1),et=a(" and "),tt=n("code",null,"MatchOS",-1),lt=a(" from Clover becomes "),nt=n("code",null,"Kernel",-1),it=a(" and "),ot=n("code",null,"MinKernel",-1),at=a("/ "),rt=n("code",null,"MaxKernel",-1),st=a(" in OpenCore, you can find pre-made patches by "),dt={href:"https://amd-osx.com/forum/memberlist.php?mode=viewprofile&u=10918&sid=e0feb8a14a97be482d2fd68dbc268f97",target:"_blank",rel:"noopener noreferrer"},ut=a("AlGrey"),ct=a("(algrey#9303)."),ht=n("p",null,"Kernel patches:",-1),pt={href:"https://github.com/AMD-OSX/AMD_Vanilla/tree/opencore/17h_19h",target:"_blank",rel:"noopener noreferrer"},gt=a("Ryzen/Threadripper(17h and 19h)"),ft=a(" (10.13, 10.14, and 10.15)"),mt=n("p",null,"To merge:",-1),bt=n("ul",null,[n("li",null,"Open both files,"),n("li",null,[a("Delete the "),n("code",null,"Kernel -> Patch"),a(" section from config.plist")]),n("li",null,[a("Copy the "),n("code",null,"Kernel -> Patch"),a(" section from patches.plist")]),n("li",null,"Paste into where old patches were in config.plist")],-1),yt=n("p",null,[n("img",{src:c,alt:""})],-1),xt=n("h3",{id:"quirks-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#quirks-2","aria-hidden":"true"},"#"),a(" Quirks")],-1),St=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"Info"),n("p",null,"Settings relating to the kernel, for us we'll be enabling the following:"),n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Quirk"),n("th",{style:{"text-align":"left"}},"Enabled")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"left"}},"PanicNoKextDump"),n("td",{style:{"text-align":"left"}},"YES")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"PowerTimeoutKernelPanic"),n("td",{style:{"text-align":"left"}},"YES")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"XhciPortLimit"),n("td",{style:{"text-align":"left"}},"YES")])])])],-1),vt={class:"custom-container details"},wt=n("summary",null,"More in-depth Info",-1),kt=r("<li><p><strong>AppleCpuPmCfgLock</strong>: NO</p><ul><li>Only needed when CFG-Lock can&#39;t be disabled in BIOS. AMD users can ignore</li></ul></li><li><p><strong>AppleXcpmCfgLock</strong>: NO</p><ul><li>Only needed when CFG-Lock can&#39;t be disabled in BIOS. AMD users can ignore</li></ul></li><li><p><strong>AppleXcpmExtraMsrs</strong>: NO</p><ul><li>Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons</li></ul></li><li><p><strong>CustomSMBIOSGuid</strong>: NO</p><ul><li>Performs GUID patching for UpdateSMBIOSMode set to <code>Custom</code>. Usually relevant for Dell laptops</li><li>Enabling this quirk in tandem with <code>PlatformInfo -&gt; UpdateSMBIOSMode -&gt; Custom</code> will disable SMBIOS injection into &quot;non-Apple&quot; OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk.</li></ul></li><li><p><strong>DisableIoMapper</strong>: NO</p><ul><li>AMD doesn&#39;t have DMAR or VT-D support so irrelevant</li></ul></li><li><p><strong>DisableLinkeditJettison</strong>: YES</p><ul><li>Allows Lilu and others to have more reliable performance without <code>keepsyms=1</code></li></ul></li><li><p><strong>DisableRtcChecksum</strong>: NO</p><ul><li>Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown</li></ul></li><li><p><strong>ExtendBTFeatureFlags</strong> NO</p><ul><li>Helpful for those having continuity issues with non-Apple/non-Fenvi cards</li></ul></li><li><p><strong>LapicKernelPanic</strong>: NO</p><ul><li>Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is <code>Kernel LAPIC</code></li></ul></li><li><p><strong>LegacyCommpage</strong>: NO</p><ul><li>Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)</li></ul></li><li><p><strong>PanicNoKextDump</strong>: YES</p><ul><li>Allows for reading kernel panics logs when kernel panics occur</li></ul></li><li><p><strong>PowerTimeoutKernelPanic</strong>: YES</p><ul><li>Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.</li></ul></li><li><p><strong>SetApfsTrimTimeout</strong>: <code>-1</code></p><ul><li>Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.</li></ul></li>",13),At=n("p",null,[n("strong",null,"XhciPortLimit"),a(": YES")],-1),Ot=a("This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. A more proper solution for AMD can be found here: "),Ct=a("AMD USB Mapping"),Mt=n("h3",{id:"scheme",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#scheme","aria-hidden":"true"},"#"),a(" Scheme")],-1),It=n("p",null,"Settings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:",-1),Pt=n("details",{class:"custom-container details"},[n("summary",null,"More in-depth Info"),n("ul",null,[n("li",null,[n("p",null,[n("strong",null,"FuzzyMatch"),a(": True")]),n("ul",null,[n("li",null,"Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6")])]),n("li",null,[n("p",null,[n("strong",null,"KernelArch"),a(": x86_64")]),n("ul",null,[n("li",null,[a("Set the kernel's arch type, you can choose between "),n("code",null,"Auto"),a(", "),n("code",null,"i386"),a(" (32-bit), and "),n("code",null,"x86_64"),a(" (64-bit).")]),n("li",null,[a("If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to "),n("code",null,"Auto"),a(" and let macOS decide based on your SMBIOS. See below table for supported values: "),n("ul",null,[n("li",null,[a("10.4-10.5 — "),n("code",null,"x86_64"),a(", "),n("code",null,"i386"),a(" or "),n("code",null,"i386-user32"),n("ul",null,[n("li",null,[n("code",null,"i386-user32"),a(" refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)")]),n("li",null,[n("code",null,"x86_64"),a(" will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5")])])]),n("li",null,[a("10.6 — "),n("code",null,"i386"),a(", "),n("code",null,"i386-user32"),a(", or "),n("code",null,"x86_64")]),n("li",null,[a("10.7 — "),n("code",null,"i386"),a(" or "),n("code",null,"x86_64")]),n("li",null,[a("10.8 or newer — "),n("code",null,"x86_64")])])])])]),n("li",null,[n("p",null,[n("strong",null,"KernelCache"),a(": Auto")]),n("ul",null,[n("li",null,[a("Set kernel cache type, mainly useful for debugging and so we recommend "),n("code",null,"Auto"),a(" for best support")])])])])],-1),Dt=n("h2",{id:"misc",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#misc","aria-hidden":"true"},"#"),a(" Misc")],-1),Bt=n("p",null,[n("img",{src:h,alt:"Misc"})],-1),Et=n("h3",{id:"boot",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#boot","aria-hidden":"true"},"#"),a(" Boot")],-1),Ut=n("p",null,"Settings for boot screen (Leave everything as default).",-1),Tt=n("h3",{id:"debug",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#debug","aria-hidden":"true"},"#"),a(" Debug")],-1),Rt=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"Info"),n("p",null,[a("Helpful for debugging OpenCore boot issues(We'll be changing everything "),n("em",null,"but"),a(),n("code",null,"DisplayDelay"),a("):")]),n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Quirk"),n("th",{style:{"text-align":"left"}},"Enabled")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"left"}},"AppleDebug"),n("td",{style:{"text-align":"left"}},"YES")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"ApplePanic"),n("td",{style:{"text-align":"left"}},"YES")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"DisableWatchDog"),n("td",{style:{"text-align":"left"}},"YES")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"Target"),n("td",{style:{"text-align":"left"}},"67")])])])],-1),Nt={class:"custom-container details"},Ft=r("<summary>More in-depth Info</summary><ul><li><strong>AppleDebug</strong>: YES <ul><li>Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer</li></ul></li><li><strong>ApplePanic</strong>: YES <ul><li>Attempts to log kernel panics to disk</li></ul></li><li><strong>DisableWatchDog</strong>: YES <ul><li>Disables the UEFI watchdog, can help with early boot issues</li></ul></li><li><strong>DisplayLevel</strong>: <code>2147483650</code><ul><li>Shows even more debug information, requires debug version of OpenCore</li></ul></li><li><strong>SerialInit</strong>: NO <ul><li>Needed for setting up serial output with OpenCore</li></ul></li><li><strong>SysReport</strong>: NO <ul><li>Helpful for debugging such as dumping ACPI tables</li><li>Note that this is limited to DEBUG versions of OpenCore</li></ul></li><li><strong>Target</strong>: <code>67</code><ul><li>Shows more debug information, requires debug version of OpenCore</li></ul></li></ul>",2),_t=a("These values are based of those calculated in "),qt=a("OpenCore debugging"),Gt=n("h3",{id:"security",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#security","aria-hidden":"true"},"#"),a(" Security")],-1),Lt=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"Info"),n("p",null,[a("Security is pretty self-explanatory, "),n("strong",null,"do not skip"),a(". We'll be changing the following:")]),n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Quirk"),n("th",{style:{"text-align":"left"}},"Enabled"),n("th",{style:{"text-align":"left"}},"Comment")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"left"}},"AllowNvramReset"),n("td",{style:{"text-align":"left"}},"YES"),n("td",{style:{"text-align":"left"}})]),n("tr",null,[n("td",{style:{"text-align":"left"}},"AllowSetDefault"),n("td",{style:{"text-align":"left"}},"YES"),n("td",{style:{"text-align":"left"}})]),n("tr",null,[n("td",{style:{"text-align":"left"}},"BlacklistAppleUpdate"),n("td",{style:{"text-align":"left"}},"YES"),n("td",{style:{"text-align":"left"}})]),n("tr",null,[n("td",{style:{"text-align":"left"}},"ScanPolicy"),n("td",{style:{"text-align":"left"}},"0"),n("td",{style:{"text-align":"left"}})]),n("tr",null,[n("td",{style:{"text-align":"left"}},"SecureBootModel"),n("td",{style:{"text-align":"left"}},"Default"),n("td",{style:{"text-align":"left"}},[a("This is a word and is case-sensitive, set to "),n("code",null,"Disabled"),a(" if you do not want secure boot(ie. you require Nvidia's Web Drivers)")])]),n("tr",null,[n("td",{style:{"text-align":"left"}},"Vault"),n("td",{style:{"text-align":"left"}},"Optional"),n("td",{style:{"text-align":"left"}},"This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive")])])])],-1),Yt={class:"custom-container details"},Vt=n("summary",null,"More in-depth Info",-1),Kt=r("<li><p><strong>AllowNvramReset</strong>: YES</p><ul><li>Allows for NVRAM reset both in the boot picker and when pressing <code>Cmd+Opt+P+R</code></li></ul></li><li><p><strong>AllowSetDefault</strong>: YES</p><ul><li>Allow <code>CTRL+Enter</code> and <code>CTRL+Index</code> to set default boot device in the picker</li></ul></li><li><p><strong>ApECID</strong>: 0</p><ul><li>Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.</li></ul></li><li><p><strong>AuthRestart</strong>: NO</p><ul><li>Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional</li></ul></li><li><p><strong>BlacklistAppleUpdate</strong>: YES</p><ul><li>Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses <code>run-efi-updater</code> variable</li></ul></li><li><p><strong>DmgLoading</strong>: Signed</p><ul><li>Ensures only signed DMGs load</li></ul></li><li><p><strong>ExposeSensitiveData</strong>: <code>6</code></p><ul><li>Shows more debug information, requires debug version of OpenCore</li></ul></li><li><p><strong>Vault</strong>: <code>Optional</code></p><ul><li>We won&#39;t be dealing vaulting so we can ignore, <strong>you won&#39;t boot with this set to Secure</strong></li><li>This is a word, it is not optional to omit this setting. You will regret it if you don&#39;t set it to <code>Optional</code>, note that it is case-sensitive</li></ul></li>",8),Ht=n("p",null,[n("strong",null,"ScanPolicy"),a(": "),n("code",null,"0")],-1),zt=n("code",null,"0",-1),Xt=a(" allows you to see all drives available, please refer to "),Wt=a("Security"),Qt=a(" section for further details. "),jt=n("strong",null,"Will not boot USB devices with this set to default",-1),Jt=n("p",null,[n("strong",null,"SecureBootModel"),a(": Default")],-1),Zt=a("Enables Apple's secure boot functionality in macOS, please refer to "),$t=a("Security"),el=a(" section for further details."),tl=a("Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: "),ll=a("Stuck on OCB: LoadImage failed - Security Violation"),nl=n("h3",{id:"tools",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tools","aria-hidden":"true"},"#"),a(" Tools")],-1),il=n("p",null,"Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.",-1),ol=n("h3",{id:"entries",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#entries","aria-hidden":"true"},"#"),a(" Entries")],-1),al=n("p",null,"Used for specifying irregular boot paths that can't be found naturally with OpenCore.",-1),rl=a("Won't be covered here, see 8.6 of "),sl={href:"https://github.com/acidanthera/OpenCorePkg/blob/master/Docs/Configuration.pdf",target:"_blank",rel:"noopener noreferrer"},dl=a("Configuration.pdf"),ul=a(" for more info"),cl=n("h2",{id:"nvram",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nvram","aria-hidden":"true"},"#"),a(" NVRAM")],-1),hl=n("p",null,[n("img",{src:p,alt:"NVRAM"})],-1),pl=n("h3",{id:"add-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#add-3","aria-hidden":"true"},"#"),a(" Add")],-1),gl=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14"),n("p",null,"Used for OpenCore's UI scaling, default will work for us. See in-depth section for more info")],-1),fl=n("details",{class:"custom-container details"},[n("summary",null,"More in-depth Info"),n("p",null,"Booter Path, mainly used for UI Scaling"),n("ul",null,[n("li",null,[n("p",null,[n("strong",null,"UIScale"),a(":")]),n("ul",null,[n("li",null,[n("code",null,"01"),a(": Standard resolution")]),n("li",null,[n("code",null,"02"),a(": HiDPI (generally required for FileVault to function correctly on smaller displays)")])])]),n("li",null,[n("p",null,[n("strong",null,"DefaultBackgroundColor"),a(": Background color used by boot.efi")]),n("ul",null,[n("li",null,[n("code",null,"00000000"),a(": Syrah Black")]),n("li",null,[n("code",null,"BFBFBF00"),a(": Light Gray")])])])])],-1),ml=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102"),n("p",null,"OpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users")],-1),bl={class:"custom-container details"},yl=n("summary",null,"More in-depth Info",-1),xl=n("strong",null,"rtc-blacklist",-1),Sl=a(": <> "),vl=a("To be used in conjunction with RTCMemoryFixup, see here for more info: "),wl=a("Fixing RTC write issues"),kl=n("li",null,"Most users can ignore this section",-1),Al={class:"custom-container tip"},Ol=n("p",{class:"custom-container-title"},"7C436110-AB2A-4BBB-A880-FE41995C9F82",-1),Cl=n("p",null,"System Integrity Protection bitmask",-1),Ml=n("ul",null,[n("li",null,[n("strong",null,"General Purpose Argomenti di avvio"),a(":")])],-1),Il=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Argomenti di avvio"),n("th",{style:{"text-align":"left"}},"Description")])],-1),Pl=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("strong",null,"-v")]),n("td",{style:{"text-align":"left"}},"This enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc.")],-1),Dl=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("strong",null,"debug=0x100")]),n("td",{style:{"text-align":"left"}},[a("This disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can "),n("em",null,"hopefully"),a(" glean some useful info and follow the breadcrumbs to get past the issues.")])],-1),Bl=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("strong",null,"keepsyms=1")]),n("td",{style:{"text-align":"left"}},"This is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself.")],-1),El=n("td",{style:{"text-align":"left"}},[n("strong",null,"npci=0x2000")],-1),Ul={style:{"text-align":"left"}},Tl=a("This disables some PCI debugging related to "),Rl=n("code",null,"kIOPCIConfiguratorPFM64",-1),Nl=a(", alternative is "),Fl=n("code",null,"npci= 0x3000",-1),_l=a(" which disables debugging related to "),ql=n("code",null,"gIOPCITunnelledKey",-1),Gl=a(" in addition. Required for when getting stuck on "),Ll=n("code",null,"PCI Start Configuration",-1),Yl=a(" as there are IRQ conflicts relating to your PCI lanes. "),Vl=n("strong",null,"Not needed if Above4GDecoding is enabled",-1),Kl=a(". "),Hl={href:"https://opensource.apple.com/source/IOPCIFamily/IOPCIFamily-370.0.2/IOPCIBridge.cpp.auto.html",target:"_blank",rel:"noopener noreferrer"},zl=a("Source"),Xl=n("td",{style:{"text-align":"left"}},[n("strong",null,"alcid=1")],-1),Wl={style:{"text-align":"left"}},Ql=a("Used for setting layout-id for AppleALC, see "),jl={href:"https://github.com/acidanthera/applealc/wiki/supported-codecs",target:"_blank",rel:"noopener noreferrer"},Jl=a("supported codecs"),Zl=a(" to figure out which layout to use for your specific system. More info on this is covered in the "),$l=a("Post-Install Page"),en=r('<ul><li><strong>GPU-Specific Argomenti di avvio</strong>:</li></ul><table><thead><tr><th style="text-align:left;">Argomenti di avvio</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>agdpmod=pikera</strong></td><td style="text-align:left;">Used for disabling board ID checks on Navi GPUs(RX 5000 series), without this you&#39;ll get a black screen. <strong>Don&#39;t use if you don&#39;t have Navi</strong>(ie. Polaris and Vega cards shouldn&#39;t use this)</td></tr><tr><td style="text-align:left;"><strong>nvda_drv_vrl=1</strong></td><td style="text-align:left;">Used for enabling Nvidia&#39;s Web Drivers on Maxwell and Pascal cards in Sierra and High Sierra</td></tr></tbody></table>',2),tn=n("p",null,[n("strong",null,"csr-active-config"),a(": "),n("code",null,"00000000")],-1),ln=n("li",null,[a("Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with "),n("code",null,"csrutil"),a(" via the recovery partition.")],-1),nn=a("csr-active-config by default is set to "),on=n("code",null,"00000000",-1),an=a(" which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: "),rn=a("Disabilitare SIP"),sn=n("li",null,[n("p",null,[n("strong",null,"run-efi-updater"),a(": "),n("code",null,"No")]),n("ul",null,[n("li",null,"This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.")])],-1),dn=n("p",null,[n("strong",null,"prev-lang:kbd"),a(": <>")],-1),un=n("li",null,[a("Needed for non-latin keyboards in the format of "),n("code",null,"lang-COUNTRY:keyboard"),a(", recommended to keep blank though you can specify it("),n("strong",null,"Default in Sample config is Russian"),a("):")],-1),cn=n("li",null,[a("American: "),n("code",null,"en-US:0"),a("("),n("code",null,"656e2d55533a30"),a(" in HEX)")],-1),hn=a("Full list can be found in "),pn={href:"https://github.com/acidanthera/OpenCorePkg/blob/master/Utilities/AppleKeyboardLayouts/AppleKeyboardLayouts.txt",target:"_blank",rel:"noopener noreferrer"},gn=a("AppleKeyboardLayouts.txt"),fn=n("li",null,[a("Hint: "),n("code",null,"prev-lang:kbd"),a(" can be changed into a String so you can input "),n("code",null,"en-US:0"),a(" directly instead of converting to HEX")],-1),mn=r('<table><thead><tr><th style="text-align:left;">Key</th><th style="text-align:left;">Type</th><th style="text-align:left;">Value</th></tr></thead><tbody><tr><td style="text-align:left;">prev-lang:kbd</td><td style="text-align:left;">String</td><td style="text-align:left;">en-US:0</td></tr></tbody></table>',1),bn=n("h3",{id:"delete-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#delete-2","aria-hidden":"true"},"#"),a(" Delete")],-1),yn=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"Info"),n("p",null,[a("Forcibly rewrites NVRAM variables, do note that "),n("code",null,"Add"),a(),n("strong",null,"will not overwrite"),a(" values already present in NVRAM so values like "),n("code",null,"Argomenti di avvio"),a(" should be left alone. For us, we'll be changing the following:")]),n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Quirk"),n("th",{style:{"text-align":"left"}},"Enabled")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"left"}},"WriteFlash"),n("td",{style:{"text-align":"left"}},"YES")])])])],-1),xn=n("details",{class:"custom-container details"},[n("summary",null,"More in-depth Info"),n("ul",null,[n("li",null,[n("p",null,[n("strong",null,"LegacyEnable"),a(": NO")]),n("ul",null,[n("li",null,"Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM")])]),n("li",null,[n("p",null,[n("strong",null,"LegacyOverwrite"),a(": NO")]),n("ul",null,[n("li",null,"Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM")])]),n("li",null,[n("p",null,[n("strong",null,"LegacySchema")]),n("ul",null,[n("li",null,"Used for assigning NVRAM variables, used with LegacyEnable set to YES")])]),n("li",null,[n("p",null,[n("strong",null,"WriteFlash"),a(": YES")]),n("ul",null,[n("li",null,"Enables writing to flash memory for all added variables.")])])])],-1),Sn=n("h2",{id:"platforminfo",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#platforminfo","aria-hidden":"true"},"#"),a(" PlatformInfo")],-1),vn=n("p",null,[n("img",{src:g,alt:"PlatformInfo"})],-1),wn={class:"custom-container tip"},kn=n("p",{class:"custom-container-title"},"Info",-1),An=a("For setting up the SMBIOS info, we'll use CorpNewt's "),On={href:"https://github.com/corpnewt/GenSMBIOS",target:"_blank",rel:"noopener noreferrer"},Cn=a("GenSMBIOS"),Mn=a(" application."),In=r('<p>For this example, we&#39;ll choose the iMacPro1,1 SMBIOS but some SMBIOS play with certain GPUs better than others:</p><ul><li>iMacPro1,1: AMD RX Polaris and newer</li><li>MacPro7,1: AMD RX Polaris and newer <ul><li>Note that MacPro7,1 is exclusive to macOS 10.15, Catalina and newer</li></ul></li><li>MacPro6,1: AMD R5/R7/R9 and older</li><li>iMac14,2: Nvidia Kepler and newer <ul><li>Note: iMac14,2 is only supported to macOS 10.8-10.15, for macOS 11, Big Sur and newer please use MacPro7,1</li></ul></li></ul><p>Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>  <span class="token comment">#######################################################</span>\n <span class="token comment">#              iMacPro1,1 SMBIOS Info                 #</span>\n<span class="token comment">#######################################################</span>\n\nType:         iMacPro1,1\nSerial:       C02YX0TZHX87\nBoard Serial: C029269024NJG36CB\nSmUUID:       DEA17B2D-2F9F-4955-B266-A74C47678AD3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>The order is <code>Product | Serial | Board Serial (MLB)</code></p><p>The <code>Type</code> part gets copied to Generic -&gt; SystemProductName.</p><p>The <code>Serial</code> part gets copied to Generic -&gt; SystemSerialNumber.</p><p>The <code>Board Serial</code> part gets copied to Generic -&gt; MLB.</p><p>The <code>SmUUID</code> part gets copied to Generic -&gt; SystemUUID.</p>',9),Pn=a("We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use "),Dn=n("code",null,"11223300 0000",-1),Bn=a(". After install follow the "),En=a("Fixing iServices"),Un=a(" page on how to find your real MAC Address)"),Tn=n("div",{class:"custom-container danger"},[n("p",{class:"custom-container-title"},"DANGER"),n("p",null,'Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: "Invalid Serial" or "Purchase Date not Validated"')],-1),Rn={href:"https://checkcoverage.apple.com",target:"_blank",rel:"noopener noreferrer"},Nn=a("Apple Check Coverage page"),Fn=n("p",null,[n("strong",null,"Automatic"),a(": YES")],-1),_n=n("ul",null,[n("li",null,"Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections")],-1),qn=n("p",null,":::",-1),Gn=n("h3",{id:"generic",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#generic","aria-hidden":"true"},"#"),a(" Generic")],-1),Ln={class:"custom-container details"},Yn=n("summary",null,"More in-depth Info",-1),Vn=n("li",null,[n("p",null,[n("strong",null,"AdviseFeatures"),a(": NO")]),n("ul",null,[n("li",null,"Used for when the EFI partition isn't first on the Windows drive")])],-1),Kn=n("li",null,[n("p",null,[n("strong",null,"MaxBIOSVersion"),a(": NO")]),n("ul",null,[n("li",null,"Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.")])],-1),Hn=n("p",null,[n("strong",null,"ProcessorType"),a(": "),n("code",null,"0")],-1),zn=a("Set to "),Xn=n("code",null,"0",-1),Wn=a(" for automatic type detection, however this value can be overridden if desired. See "),Qn={href:"https://github.com/acidanthera/OpenCorePkg/blob/master/Include/Apple/IndustryStandard/AppleSmBios.h",target:"_blank",rel:"noopener noreferrer"},jn=a("AppleSmBios.h"),Jn=a(" for possible values"),Zn=r("<li><p><strong>SpoofVendor</strong>: YES</p><ul><li>Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case</li></ul></li><li><p><strong>SystemMemoryStatus</strong>: Auto</p><ul><li>Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend <code>Auto</code></li></ul></li><li><p><strong>UpdateDataHub</strong>: YES</p><ul><li>Update Data Hub fields</li></ul></li><li><p><strong>UpdateNVRAM</strong>: YES</p><ul><li>Update NVRAM fields</li></ul></li><li><p><strong>UpdateSMBIOS</strong>: YES</p><ul><li>Updates SMBIOS fields</li></ul></li><li><p><strong>UpdateSMBIOSMode</strong>: Create</p><ul><li>Replace the tables with newly allocated EfiReservedMemoryType, use <code>Custom</code> on Dell laptops requiring <code>CustomSMBIOSGuid</code> quirk</li><li>Setting to <code>Custom</code> with <code>CustomSMBIOSGuid</code> quirk enabled can also disable SMBIOS injection into &quot;non-Apple&quot; OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk</li></ul></li>",6),$n=n("h2",{id:"uefi",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#uefi","aria-hidden":"true"},"#"),a(" UEFI")],-1),ei=n("p",null,[n("img",{src:f,alt:"UEFI"})],-1),ti=n("p",null,[n("strong",null,"ConnectDrivers"),a(": YES")],-1),li=n("ul",null,[n("li",null,"Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.")],-1),ni=n("h3",{id:"drivers",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#drivers","aria-hidden":"true"},"#"),a(" Drivers")],-1),ii=n("p",null,"Add your .efi drivers here.",-1),oi=n("p",null,"Only drivers present here should be:",-1),ai=n("ul",null,[n("li",null,"HfsPlus.efi"),n("li",null,"OpenRuntime.efi")],-1),ri=n("h3",{id:"apfs",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#apfs","aria-hidden":"true"},"#"),a(" APFS")],-1),si=n("p",null,"Settings related to the APFS driver, leave everything here as default.",-1),di=n("h3",{id:"audio",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#audio","aria-hidden":"true"},"#"),a(" Audio")],-1),ui=n("p",null,"Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.",-1),ci=a("For further use of AudioDxe and the Audio section, please see the Post Install page: "),hi=a("Add GUI and Boot-chime"),pi=n("h3",{id:"input",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#input","aria-hidden":"true"},"#"),a(" Input")],-1),gi=a("Related to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: "),fi=a("Security and FileVault"),mi=n("h3",{id:"output",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#output","aria-hidden":"true"},"#"),a(" Output")],-1),bi=n("p",null,"Relating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.",-1),yi=n("h3",{id:"protocoloverrides",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#protocoloverrides","aria-hidden":"true"},"#"),a(" ProtocolOverrides")],-1),xi=a("Mainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: "),Si=a("Security and FileVault"),vi=n("h3",{id:"quirks-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#quirks-3","aria-hidden":"true"},"#"),a(" Quirks")],-1),wi=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"Info"),n("p",null,"Relating to quirks with the UEFI environment, for us we'll be changing the following:"),n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Quirk"),n("th",{style:{"text-align":"left"}},"Enabled"),n("th",{style:{"text-align":"left"}},"Comment")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"left"}},"UnblockFsConnect"),n("td",{style:{"text-align":"left"}},"NO"),n("td",{style:{"text-align":"left"}},"Needed mainly by HP motherboards")])])])],-1),ki=n("details",{class:"custom-container details"},[n("summary",null,"More in-depth Info"),n("ul",null,[n("li",null,[n("p",null,[n("strong",null,"DisableSecurityPolicy"),a(": NO")]),n("ul",null,[n("li",null,"Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load."),n("li",null,"If running a Microsoft Surface device, recommended to enable this option")])]),n("li",null,[n("p",null,[n("strong",null,"RequestBootVarRouting"),a(": YES")]),n("ul",null,[n("li",null,[a("Redirects AptioMemoryFix from "),n("code",null,"EFI_GLOBAL_VARIABLE_GUID"),a(" to "),n("code",null,"OC_VENDOR_VARIABLE_GUID"),a(". Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.")])])]),n("li",null,[n("p",null,[n("strong",null,"UnblockFsConnect"),a(": NO")]),n("ul",null,[n("li",null,"Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed")])])])],-1),Ai=n("h3",{id:"reservedmemory",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reservedmemory","aria-hidden":"true"},"#"),a(" ReservedMemory")],-1),Oi=n("p",null,"Used for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide",-1),Ci=n("h2",{id:"amd-bios-settings",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#amd-bios-settings","aria-hidden":"true"},"#"),a(" AMD BIOS Settings")],-1),Mi=n("ul",null,[n("li",null,"Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS")],-1),Ii=n("h3",{id:"disable",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#disable","aria-hidden":"true"},"#"),a(" Disable")],-1),Pi=n("ul",null,[n("li",null,"Fast Boot"),n("li",null,"Secure Boot"),n("li",null,"Serial/COM Port"),n("li",null,"Parallel Port"),n("li",null,[a("Compatibility Support Module (CSM)("),n("strong",null,[a("Must be off, GPU errors like "),n("code",null,"gIO"),a(" are common when this option in enabled")]),a(")")])],-1),Di=n("p",null,[n("strong",null,"Special note for 3990X users"),a(": macOS currently does not support more than 64 threads in the kernel, and so will kernel panic if it sees more. The 3990X CPU has 128 threads total and so requires half of that disabled. We recommend disabling hyper threading in the BIOS for these situations.")],-1),Bi=n("h3",{id:"enable",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#enable","aria-hidden":"true"},"#"),a(" Enable")],-1),Ei=n("ul",null,[n("li",null,[a("Above 4G decoding("),n("strong",null,[a("This must be on, if you can't find the option then add "),n("code",null,"npci=0x2000"),a(" to Argomenti di avvio. Do not have both this option and npci enabled at the same time.")]),a(") "),n("ul",null,[n("li",null,"If you are on a Gigabyte/Aorus or an AsRock motherboard, enabling this option may break certain drivers(ie. Ethernet) and/or boot failures on other OSes, if it does happen then disable this option and opt for npci instead"),n("li",null,[a("2020+ BIOS Notes: When enabling Above4G, Resizable BAR Support may become an available on some X570 and newer motherboards. Please ensure this is "),n("strong",null,"Disabled"),a(" instead of set to Auto.")])])]),n("li",null,"EHCI/XHCI Hand-off"),n("li",null,"OS type: Windows 8.1/10 UEFI Mode"),n("li",null,"SATA Mode: AHCI")],-1),Ui=a("Ora, con tutto questo fatto, vai a "),Ti=a("Pagina Installazione");m.render=function(a,r){const s=e("OutboundLink"),d=e("RouterLink");return t(),l(o,null,[b,y,x,S,v,w,n("ul",null,[n("li",null,[n("a",k,[A,n(s)]),O]),n("li",null,[n("a",C,[M,n(s)]),I]),n("li",null,[n("a",P,[D,n(s)]),n("ul",null,[n("li",null,[B,n(d,{to:"/config.plist/"},{default:i((()=>[E])),_:1})])])])]),U,T,R,N,n("div",F,[_,n("p",null,[q,G,L,n(d,{to:"/OpenCore-Post-Install/usb/"},{default:i((()=>[Y])),_:1}),V,n(d,{to:"/extras/spoof.html"},{default:i((()=>[K])),_:1}),H,z,X,n("strong",null,[n(d,{to:"/Getting-Started-With-ACPI/"},{default:i((()=>[W])),_:1})])]),Q]),j,J,Z,$,ee,te,le,ne,ie,oe,ae,re,se,n("details",de,[ue,n("ul",null,[ce,he,n("li",null,[pe,ge,n("ul",null,[fe,n("li",null,[me,be,ye,n(d,{to:"/troubleshooting/extended/kernel-issues.html#stuck-on-eb-log-exitbs-start"},{default:i((()=>[xe])),_:1})])])]),Se])]),ve,we,ke,Ae,Oe,Ce,Me,Ie,Pe,De,Be,n("details",Ee,[Ue,Te,Re,n("p",null,[Ne,n("a",Fe,[_e,n(s)]),qe,Ge,Le]),Ye]),Ve,Ke,He,ze,Xe,We,Qe,je,Je,n("p",null,[Ze,$e,et,tt,lt,nt,it,ot,at,rt,st,n("a",dt,[ut,n(s)]),ct]),ht,n("ul",null,[n("li",null,[n("a",pt,[gt,n(s)]),ft])]),mt,bt,yt,xt,St,n("details",vt,[wt,n("ul",null,[kt,n("li",null,[At,n("ul",null,[n("li",null,[Ot,n(d,{to:"/OpenCore-Post-Install/usb/"},{default:i((()=>[Ct])),_:1})])])])])]),Mt,It,Pt,Dt,Bt,Et,Ut,Tt,Rt,n("details",Nt,[Ft,n("p",null,[_t,n(d,{to:"/troubleshooting/debug.html"},{default:i((()=>[qt])),_:1})])]),Gt,Lt,n("details",Yt,[Vt,n("ul",null,[Kt,n("li",null,[Ht,n("ul",null,[n("li",null,[zt,Xt,n(d,{to:"/OpenCore-Post-Install/universal/security.html"},{default:i((()=>[Wt])),_:1}),Qt,jt])])]),n("li",null,[Jt,n("ul",null,[n("li",null,[Zt,n(d,{to:"/OpenCore-Post-Install/universal/security.html"},{default:i((()=>[$t])),_:1}),el]),n("li",null,[tl,n(d,{to:"/troubleshooting/extended/kernel-issues.html#stuck-on-ocb-loadimage-failed-security-violation"},{default:i((()=>[ll])),_:1})])])])])]),nl,il,ol,al,n("p",null,[rl,n("a",sl,[dl,n(s)]),ul]),cl,hl,pl,gl,fl,ml,n("details",bl,[yl,n("ul",null,[n("li",null,[xl,Sl,n("ul",null,[n("li",null,[vl,n(d,{to:"/OpenCore-Post-Install/misc/rtc.html#finding-our-bad-rtc-region"},{default:i((()=>[wl])),_:1})]),kl])])])]),n("div",Al,[Ol,Cl,Ml,n("table",null,[Il,n("tbody",null,[Pl,Dl,Bl,n("tr",null,[El,n("td",Ul,[Tl,Rl,Nl,Fl,_l,ql,Gl,Ll,Yl,Vl,Kl,n("a",Hl,[zl,n(s)])])]),n("tr",null,[Xl,n("td",Wl,[Ql,n("a",jl,[Jl,n(s)]),Zl,n(d,{to:"/OpenCore-Post-Install/"},{default:i((()=>[$l])),_:1})])])])]),en,n("ul",null,[n("li",null,[tn,n("ul",null,[ln,n("li",null,[nn,on,an,n(d,{to:"/troubleshooting/extended/post-issues.html#disabilitare-sip"},{default:i((()=>[rn])),_:1})])])]),sn,n("li",null,[dn,n("ul",null,[un,cn,n("li",null,[hn,n("a",pn,[gn,n(s)])]),fn])])]),mn]),bn,yn,xn,Sn,vn,n("div",wn,[kn,n("p",null,[An,n("a",On,[Cn,n(s)]),Mn]),In,n("p",null,[Pn,Dn,Bn,n(d,{to:"/OpenCore-Post-Install/universal/iservices.html"},{default:i((()=>[En])),_:1}),Un]),Tn]),n("p",null,[n("a",Rn,[Nn,n(s)])]),Fn,_n,qn,Gn,n("details",Ln,[Yn,n("ul",null,[Vn,Kn,n("li",null,[Hn,n("ul",null,[n("li",null,[zn,Xn,Wn,n("a",Qn,[jn,n(s)]),Jn])])]),Zn])]),$n,ei,ti,li,ni,ii,oi,ai,ri,si,di,ui,n("ul",null,[n("li",null,[ci,n(d,{to:"/OpenCore-Post-Install/"},{default:i((()=>[hi])),_:1})])]),pi,n("p",null,[gi,n(d,{to:"/OpenCore-Post-Install/"},{default:i((()=>[fi])),_:1})]),mi,bi,yi,n("p",null,[xi,n(d,{to:"/OpenCore-Post-Install/"},{default:i((()=>[Si])),_:1})]),vi,wi,ki,Ai,Oi,Ci,Mi,Ii,Pi,Di,Bi,Ei,n("blockquote",null,[n("p",null,[Ui,n(d,{to:"/installation.html"},{default:i((()=>[Ti])),_:1})])])],64)};export default m;
