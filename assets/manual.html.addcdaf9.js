import{r as e,o as t,c as l,a as n,w as a,F as i,b as o}from"./app.9c75e1c0.js";const s={},r=n("h1",{id:"fixing-power-management-manual",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fixing-power-management-manual","aria-hidden":"true"},"#"),o(" Fixing Power Management: Manual")],-1),h={class:"table-of-contents"},u=o("# Finding the ACPI path"),d=o("# DSDT"),p=o("# Edits to the sample SSDT"),c=o("# Compiling the SSDT"),g=o("# Wrapping up"),m=n("h2",{id:"finding-the-acpi-path",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#finding-the-acpi-path","aria-hidden":"true"},"#"),o(" Finding the ACPI path")],-1),f=n("p",null,"To find the ACPI pathing, you have 2 methods:",-1),S=n("ul",null,[n("li",null,[n("a",{href:"#DSDT"},"DSDT")]),n("li",null,[n("a",{href:"#devicemanager"},"DeviceManager")])],-1),y=n("h3",{id:"dsdt",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dsdt","aria-hidden":"true"},"#"),o(" DSDT")],-1),D=o("CPU naming is fairly easy to figure out, first open your decompiled DSDT you got from "),w=o("Dumping the DSDT"),P=o(" and "),b=o("Decompiling and Compiling"),C=o(" with either MaciASL(if in macOS) or any other text editor if in Windows or Linux(VSCode has an "),T={href:"https://marketplace.visualstudio.com/items?itemName=Thog.vscode-asl",target:"_blank",rel:"noopener noreferrer"},x=o("ACPI extension"),v=o(" that can also help)."),k=n("p",null,[o("Next search for "),n("code",null,"Processor"),o(". This should give you a result like this:")],-1),A=n("p",null,[n("img",{src:"/assets/processor.f55bba39.png",alt:""})],-1),I=n("p",null,[o("As we can see, the first processor in our list is "),n("code",null,"SB.PR00"),o(". This is what we'll be applying the "),n("code",null,"plugin-type=1"),o(" property too.")],-1),_=n("p",null,[n("strong",null,"X99 and X299 note"),o(":")],-1),M=n("p",null,"Due to the different DSDT structure of these systems, you'll need to actually check in multiple places as the pathing isn't as obvious:",-1),W=n("p",null,[n("img",{src:"/assets/processor-2.3f883e8e.png",alt:""})],-1),O=n("p",null,[o("If we then search for instances of "),n("code",null,"CP00"),o(" we find that its full ACPI pathing is "),n("code",null,"SB.SCK0.CP00"),o(":")],-1),F=n("p",null,[n("img",{src:"/assets/cp00.e5932e21.png",alt:""})],-1),L=n("p",null,[o("Now with the pathing, you can head here: "),n("a",{href:"#edits-to-the-sample-ssdt"},"Edits to the sample SSDT")],-1),U=n("h4",{id:"devicemanager",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#devicemanager","aria-hidden":"true"},"#"),o(" DeviceManager")],-1),B=n("p",null,"If you already have Windows installed on this machine, finding the CPU pathing is fairly easy.",-1),N=n("p",null,[o("Start by opening up Device Manager in Windows and looking for a device named "),n("code",null,"Processor"),o(". Once found, click on it and select the "),n("code",null,"BIOS device Name"),o(" entry. You should get something like this:")],-1),R=n("p",null,[n("img",{src:"/assets/plug-bios.91a19f97.png",alt:""})],-1),X=n("p",null,[o("From the above, we can see that our pathing is "),n("code",null,"PR.CPU0"),o(". Pay close attention to the start as "),n("code",null,"PR"),o(" is important for creating the SSDT")],-1),E=n("p",null,[n("strong",null,"X99 and X299 note"),o(":")],-1),K=n("p",null,[o("Odd quirk of DeviceManager in Windows is that the Processor's order does not actually match the ACPI path, instead giving something like "),n("code",null,"SB.SCK0.CP10"),o(":")],-1),j=n("p",null,[n("img",{src:"/assets/plug-x299.cec110f2.png",alt:""})],-1),G=n("p",null,"When this happens, you can either:",-1),q=n("ul",null,[n("li",null,"Look through and find the lowest value"),n("li",null,[o("Assume the lowest(commonly being "),n("code",null,"PR00"),o(" or "),n("code",null,"CP00"),o(")")])],-1),V=n("p",null,[o("So with the above X299 example, our CPU pathing would be "),n("code",null,"SB.SCK0.CP00")],-1),Y=n("p",null,[o("Now with the pathing, you can head here: "),n("a",{href:"#edits-to-the-sample-ssdt"},"Edits to the sample SSDT")],-1),z=n("h2",{id:"edits-to-the-sample-ssdt",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#edits-to-the-sample-ssdt","aria-hidden":"true"},"#"),o(" Edits to the sample SSDT")],-1),H=n("p",null,"Now that we have our ACPI path, lets grab our SSDT and get to work:",-1),J={href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-PLUG.dsl",target:"_blank",rel:"noopener noreferrer"},Q=o("SSDT-PLUG.dsl"),Z=n("p",null,[o("From the above SSDT, it's very likely your processor is already there. If so, you can delete all the other entries other than yours and the "),n("code",null,"Method PMPM"),o(" as this is what injects the "),n("code",null,"plugin-type=1"),o(" property into our system.")],-1),$=n("ul",null,[n("li",null,[n("strong",null,"Reminder"),o(": We only need to apply "),n("code",null,"plugin-type=1"),o(" to the first thread")])],-1),ee=n("p",null,[o("For the below example, we'll be using the X299 example("),n("code",null,"SB.SCK0.CP00"),o(")")],-1),te=n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"Original"),n("th",{style:{"text-align":"center"}},"Cleaned Up")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"center"}},[n("img",{src:"/assets/ssdt-mess.1afd4979.png",alt:""})]),n("td",{style:{"text-align":"center"}},[n("img",{src:"/assets/ssdt-clean.6e93fb19.png",alt:""})])])])],-1),le=n("h2",{id:"compiling-the-ssdt",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#compiling-the-ssdt","aria-hidden":"true"},"#"),o(" Compiling the SSDT")],-1),ne=o("With the SSDT done, you're now "),ae=o("ready to compile the SSDT!"),ie=n("h2",{id:"wrapping-up",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#wrapping-up","aria-hidden":"true"},"#"),o(" Wrapping up")],-1),oe=n("p",null,"Once you're done making your SSDT, either head to the next page to finish the rest of the SSDTs or head here if you're ready to wrap up:",-1),se=n("strong",null,"Cleanup",-1);s.render=function(o,s){const re=e("RouterLink"),he=e("OutboundLink");return t(),l(i,null,[r,n("nav",h,[n("ul",null,[n("li",null,[n(re,{to:"#finding-the-acpi-path"},{default:a((()=>[u])),_:1}),n("ul",null,[n("li",null,[n(re,{to:"#dsdt"},{default:a((()=>[d])),_:1})])])]),n("li",null,[n(re,{to:"#edits-to-the-sample-ssdt"},{default:a((()=>[p])),_:1})]),n("li",null,[n(re,{to:"#compiling-the-ssdt"},{default:a((()=>[c])),_:1})]),n("li",null,[n(re,{to:"#wrapping-up"},{default:a((()=>[g])),_:1})])])]),m,f,S,y,n("p",null,[D,n(re,{to:"/dump.html"},{default:a((()=>[w])),_:1}),P,n(re,{to:"/compile.html"},{default:a((()=>[b])),_:1}),C,n("a",T,[x,n(he)]),v]),k,A,I,_,M,W,O,F,L,U,B,N,R,X,E,K,j,G,q,V,Y,z,H,n("ul",null,[n("li",null,[n("a",J,[Q,n(he)])])]),Z,$,ee,te,le,n("p",null,[ne,n(re,{to:"/compile.html"},{default:a((()=>[ae])),_:1})]),ie,oe,n("ul",null,[n("li",null,[n(re,{to:"/cleanup.html"},{default:a((()=>[se])),_:1})])])],64)};export default s;
