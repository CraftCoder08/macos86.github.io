import{r as e,o as l,c as a,a as i,w as r,F as t,b as n,d as o}from"./app.9c75e1c0.js";const d={},c=i("h1",{id:"convertire-le-proprieta-comuni-da-clover-a-opencore",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#convertire-le-proprieta-comuni-da-clover-a-opencore","aria-hidden":"true"},"#"),n(" Convertire le proprietà comuni da Clover a OpenCore")],-1),u=i("p",null,"Perciò questa piccola (beh, ora non più così piccola...) pagina è fatta per chi ha problemi a migrare da Clover a OpenCore dato che alcuni quirk per sistemi legacy sono richiesti oppure nel Configuration.pdf che non ha dettagli per i laptop.",-1),s={class:"table-of-contents"},h=n("# Kext e Driver Firmware"),p=n("# Acpi"),g=n("# ACPI renames"),m=n("# Patches"),f=n("# Fixes"),b=n("# SSDTs"),v=n("# Boot"),P=n("# Boot Argument"),S=n("# NeverHibernate"),C=n("# Default Boot Volume"),A=n("# Boot Graphics"),x=n("# DefaultBackgroundColor"),I=n("# EFILoginHiDPI"),k=n("# flagstate"),D=n("# UIScale"),_=n("# CPU"),F=n("# Type"),E=n("# HWPEnable"),B=n("# QEMU"),T=n("# TurboDisable"),M=n("# Devices"),R=n("# USB"),y=n("# Audio"),U=n("# Add Properties"),L=n("# Properties"),G=n("# FakeID"),H=n("# ForceHPET"),N=n("# Disable Drivers"),O=n("# Gui"),V=n("# Graphics"),w=n("# InjectIntel"),K=n("# InjectAti"),j=n("# InjectNvidia"),z=n("# FakeIntel"),W=n("# FakeAti"),q=n("# Custom EDID"),X=n("# Dual Link"),Q=n("# NVCAP"),Y=n("# display-cfg"),Z=n("# LoadVBios"),J=n("# PatchVBios"),$=n("# NvidiaGeneric"),ee=n("# NvidiaSingle"),le=n("# NvidiaNoEFI"),ae=n("# ig-platform-id"),ie=n("# BootDisplay"),re=n("# RadeonDeInit"),te=n("# Kernel and Kext Patches"),ne=n("# KernelPm"),oe=n("# AppleIntelCPUPM"),de=n("# DellSMBIOSPatch"),ce=n("# KextsToPatch"),ue=n("# KernelToPatch"),se=n("# ForceKextsToLoad"),he=n("# Kernel LAPIC"),pe=n("# KernelXCPM"),ge=n("# USB Port Limit Patches"),me=n("# External Icons Patch"),fe=n("# AppleRTC"),be=n("# FakeCPUID"),ve=n("# Rt Variables"),Pe=n("# ROM"),Se=n("# MLB"),Ce=n("# BooterConfig"),Ae=n("# CsrActiveConfig"),xe=n("# SMBIOS"),Ie=n("# Product Name"),ke=n("# Serial Number"),De=n("# Board Serial Number"),_e=n("# SmUUID"),Fe=n("# Memory"),Ee=n("# Slots AAPL Injection"),Be=n("# System Parameters"),Te=n("# CustomUUID"),Me=n("# InjectSystemID"),Re=n("# BacklightLevel"),ye=n("# InjectKexts"),Ue=n("# NoCaches"),Le=n("# ExposeSysVariables"),Ge=n("# NvidiaWeb"),He=n("# Status"),Ne=i("h2",{id:"kext-e-driver-firmware",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#kext-e-driver-firmware","aria-hidden":"true"},"#"),n(" Kext e Driver Firmware")],-1),Oe=n("Vedi "),Ve={href:"https://github.com/dortania/OpenCore-Install-Guide/blob/master/clover-conversion/clover-efi.md",target:"_blank",rel:"noopener noreferrer"},we=n("Kext e Driver Firmware (EN)"),Ke=n("."),je=i("h2",{id:"acpi",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#acpi","aria-hidden":"true"},"#"),n(" Acpi")],-1),ze=i("h3",{id:"acpi-renames",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#acpi-renames","aria-hidden":"true"},"#"),n(" ACPI renames")],-1),We=i("p",null,"Nella transizione da Clover a OpenCore dobbiamo rimuovere le patch non necessarie che sono state utilizzate per lungo tempo:",-1),qe=n("Patch di EHCI: Raccomandato lo spegnimento del controller con "),Xe={href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-EHCx_OFF.dsl",target:"_blank",rel:"noopener noreferrer"},Qe=n("SSDT-EHCx_OFF"),Ye=n(". Skylake e più recenti non lo avranno, perciò non è necessario. "),Ze=i("ul",null,[i("li",null,"cambiare EHC1 a EH01"),i("li",null,"cambiare EHC2 a EH02")],-1),Je=n("Patch di XHCI: Non necessarie dato che è stato fatto un "),$e={href:"https://github.com/corpnewt/USBMap",target:"_blank",rel:"noopener noreferrer"},el=n("kext che inietta le porte"),ll=i("ul",null,[i("li",null,"cambiare XHCI a XHC"),i("li",null,"cambiare XHC1 a XHC")],-1),al=i("li",null,[n("Patch di SATA: Puramente cosmetico in macOS in questo momento "),i("ul",null,[i("li",null,"cambiare SAT0 a SATA"),i("li",null,"change SAT1 a SATA")])],-1),il=n("Patch di IMEI: Gestito da "),rl={href:"https://github.com/acidanthera/whatevergreen/releases",target:"_blank",rel:"noopener noreferrer"},tl=n("WhateverGreen"),nl=i("ul",null,[i("li",null,"cambiare HECI a IMEI"),i("li",null,"cambiare HEC1 a IMEI"),i("li",null,"cambiare MEI a IMEI"),i("li",null,"cambiare IDER a MEID")],-1),ol=n("Patch di GFX: Gestito da "),dl={href:"https://github.com/acidanthera/whatevergreen/releases",target:"_blank",rel:"noopener noreferrer"},cl=n("WhateverGreen"),ul=i("ul",null,[i("li",null,"cambiare GFX0 a IGPU"),i("li",null,"cambiare PEG0 a GFX0"),i("li",null,"cambiare PEGP a GFX0"),i("li",null,"cambiare SL01 a PEGP")],-1),sl=n("Patch di EC: Vedi per una soluzione migliore: "),hl=n("Iniziamo con ACPI"),pl=i("ul",null,[i("li",null,"cambiare EC0 a EC"),i("li",null,"cambiare H_EC a EC"),i("li",null,"cambiare ECDV a EC"),i("li",null,"cambiare PGEC a EC")],-1),gl=n("Audio renames: Gestito da "),ml={href:"https://github.com/acidanthera/AppleALC",target:"_blank",rel:"noopener noreferrer"},fl=n("AppleALC"),bl=i("ul",null,[i("li",null,"cambiare HDAS a HDEF"),i("li",null,"cambiare CAVS a HDEF"),i("li",null,"cambiare AZAL a HDEF"),i("li",null,"cambiare ALZA a HDEF"),i("li",null,"cambiare B0D3 a HDAU")],-1),vl=n("Fix del bug nella Z390 legato al RTC del BIOS: Vedi qui per una soluzione migliore: "),Pl=n("Iniziamo con ACPI"),Sl=n(" (SSDT-AWAC) "),Cl=i("ul",null,[i("li",null,"cambiare STAS a [Blank]"),i("li",null,"Fix del bug nella Z390 legato al RTC del BIOS"),i("li",null,"Fix del bug nella serie 300 legato al RTC del BIOS")],-1),Al=n("Patch del NVMe: "),xl={href:"https://github.com/acidanthera/NVMeFix",target:"_blank",rel:"noopener noreferrer"},Il=n("NVMeFix"),kl=n(" sistema il power management "),Dl=i("ul",null,[i("li",null,"cambiare PXSX a ANS1"),i("li",null,"cambiare PXSX a ANS2")],-1),_l=n("Patch di Airport/WiFi: "),Fl={href:"https://github.com/acidanthera/AirportBrcmFixup",target:"_blank",rel:"noopener noreferrer"},El=n("AirportBrcmFixup"),Bl=i("ul",null,[i("li",null,"cambiare PXSX a ARPT")],-1),Tl=n("Altre patch puramente cosmetiche: "),Ml=n("cambiare LPC0 a LPCB(usa "),Rl={href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-SBUS-MCHC.dsl",target:"_blank",rel:"noopener noreferrer"},yl=n("SSDT-SBUS-MCHC"),Ul=n(" per sistemare il supporto SMBUS)"),Ll=i("li",null,"cambiare PC00 a PCIO",-1),Gl=i("li",null,"cambiare FPU a MATH",-1),Hl=i("li",null,"cambiare TMR a TIMR",-1),Nl=i("li",null,"cambiare PIC a IPIC",-1),Ol=i("li",null,"cambiare GBE1 a ETH0",-1),Vl=o('<h3 id="patches" tabindex="-1"><a class="header-anchor" href="#patches" aria-hidden="true">#</a> Patches</h3><ul><li><p>Patch del TgtBridge:</p><ul><li><code>ACPI -&gt; Patch -&gt; ... -&gt; Base</code></li></ul></li><li><p>DisableASPM:</p><ul><li><code>DeviceProperties -&gt; Add -&gt; PciRoot... -&gt; pci-aspm-default | Data | &lt;00&gt;</code></li></ul></li><li><p>HaltEnabler:</p><ul><li><code>ACPI -&gt; Quirks -&gt; FadtEnableReset -&gt; YES</code></li></ul></li></ul><h3 id="fixes" tabindex="-1"><a class="header-anchor" href="#fixes" aria-hidden="true">#</a> Fixes</h3>',3),wl=i("p",null,[i("strong",null,"FixAirport"),n(":")],-1),Kl={href:"https://github.com/acidanthera/AirportBrcmFixup",target:"_blank",rel:"noopener noreferrer"},jl=n("AirportBrcmFixup"),zl=i("p",null,[i("strong",null,"FixIPIC"),n(":")],-1),Wl={href:"https://github.com/corpnewt/SSDTTime",target:"_blank",rel:"noopener noreferrer"},ql=n("SSDTTime"),Xl=n(" di Corpnewt per creare un vero e proprio SSDT, "),Ql=i("code",null,"FixHPET - Patch out IRQ Conflicts",-1),Yl=i("p",null,[i("strong",null,"FixSBUS"),n(":")],-1),Zl={href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-SBUS-MCHC.dsl",target:"_blank",rel:"noopener noreferrer"},Jl=n("SSDT-SBUS-MCHC"),$l=i("p",null,[i("strong",null,"FixShutdown"),n(":")],-1),ea={href:"https://github.com/macos86/OpenCore-Post-Install/blob/master/extra-files/FixShutdown-USB-SSDT.dsl",target:"_blank",rel:"noopener noreferrer"},la=n("FixShutdown-USB-SSDT"),aa={href:"https://github.com/macos86/OpenCore-Post-Install/blob/master/extra-files/FixShutdown-Patch.plist",target:"_blank",rel:"noopener noreferrer"},ia=i("code",null,"_PTS",-1),ra=n(" to "),ta=i("code",null,"ZPTS",-1),na=n(" Patch"),oa=i("li",null,[n("Ciò non danneggerà le installazioni Windows o Linux poiché si tratta solo di aggiungere metodi mancanti che avrebbero dovuto essere lì per iniziare. "),i("em",null,"Incolpare gli autori del firmware")],-1),da=i("li",null,[i("p",null,[i("strong",null,"FixDisplay"),n(":")]),i("ul",null,[i("li",null,"Patch del framebuffer manuale, WhateverGreen fa già la maggior parte del lavoro")])],-1),ca=i("li",null,[i("p",null,[i("strong",null,"FixHDA"),n(":")]),i("ul",null,[i("li",null,"Gestito da AppleALC")])],-1),ua=i("p",null,[i("strong",null,"FixHPET"),n(":")],-1),sa={href:"https://github.com/corpnewt/SSDTTime",target:"_blank",rel:"noopener noreferrer"},ha=n("SSDTTime"),pa=n(" di Corpnewt per creare un vero e proprio SSDT, "),ga=i("code",null,"FixHPET - Patch out IRQ Conflicts",-1),ma=i("li",null,[i("p",null,[i("strong",null,"FixSATA"),n(":")]),i("ul",null,[i("li",null,[i("code",null,"Kernel -> Quirks -> ExternalDiskIcons -> YES")])])],-1),fa=i("p",null,[i("strong",null,"FixADP1"),n(":")],-1),ba=n("Rinomina "),va=i("code",null,"AC0_",-1),Pa=n(" a "),Sa=i("code",null,"ADP1",-1),Ca=n(", vedi "),Aa={href:"https://github.com/dortania/OpenCore-Install-Guide/blob/master/extra-files/Rename-SSDT.dsl",target:"_blank",rel:"noopener noreferrer"},xa=n("Rename-SSDT"),Ia=n(" per un esempio"),ka=n("Inietta anche "),Da=i("code",null,"Name (_PRW, Package (0x02) {0x1C,0x03})",-1),_a=n(" nel dispositivo se non presente. "),Fa={href:"https://github.com/CloverHackyColor/CloverBootloader/blob/81f2b91b1552a4387abaa2c48a210c63d5b6233c/rEFIt_UEFI/Platform/FixBiosDsdt.cpp#L1677-L1692",target:"_blank",rel:"noopener noreferrer"},Ea=n("Fonte"),Ba=i("p",null,[i("strong",null,"FixRTC"),n(":")],-1),Ta={href:"https://github.com/corpnewt/SSDTTime",target:"_blank",rel:"noopener noreferrer"},Ma=n("SSDTTime"),Ra=n(" di Corpnewt per creare un vero e proprio SSDT, "),ya=i("code",null,"FixHPET - Patch out IRQ Conflicts",-1),Ua=i("p",null,[i("strong",null,"FixTMR"),n(":")],-1),La={href:"https://github.com/corpnewt/SSDTTime",target:"_blank",rel:"noopener noreferrer"},Ga=n("SSDTTime"),Ha=n(" di Corpnewt per creare un vero e proprio SSDT, "),Na=i("code",null,"FixHPET - Patch out IRQ Conflicts",-1),Oa=i("p",null,[i("strong",null,"AddPNLF"),n(":")],-1),Va=n("Vedi "),wa=n("SSDT-PNLF"),Ka=i("p",null,[i("strong",null,"AddMCHC"),n(":")],-1),ja={href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-SBUS-MCHC.dsl",target:"_blank",rel:"noopener noreferrer"},za=n("SSDT-SBUS-MCHC"),Wa=i("p",null,[i("strong",null,"AddIMEI"),n(":")],-1),qa={href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-SBUS-MCHC.dsl",target:"_blank",rel:"noopener noreferrer"},Xa=n("SSDT-SBUS-MCHC"),Qa=i("li",null,"WhateverGreen si occuperà di rinominare IMEI",-1),Ya=n("Per Sandy Bridge su Z77 o per IvyBridge su Z67, IMEI deve essere ricreato: "),Za={href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-IMEI.dsl",target:"_blank",rel:"noopener noreferrer"},Ja=n("SSDT-IMEI"),$a=o("<li><p><strong>FakeLPC</strong>:</p><ul><li><code>DeviceProperties -&gt; Add -&gt; PciRoot... -&gt; device-id</code></li><li>Dovrai ingannare macOS per supportare un controller LPC già presente in AppleLPC</li></ul></li><li><p><strong>FixIntelGfx</strong>:</p><ul><li>WhateverGreen se ne occupa</li></ul></li><li><p><strong>AddHDMI</strong>:</p><ul><li>WhateverGreen se ne occupa</li></ul></li>",3),ei=i("p",null,[i("strong",null,"DropTables"),n(":")],-1),li=i("ul",null,[i("li",null,[i("code",null,"ACPI -> Delete")])],-1),ai=i("h3",{id:"ssdts",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#ssdts","aria-hidden":"true"},"#"),n(" SSDTs")],-1),ii=i("p",null,[i("strong",null,"PluginType"),n(":")],-1),ri=n("SSDT-PLUG"),ti=n("Vedi "),ni=n("Iniziamo con ACPI"),oi=n(" per più dettagli"),di=i("strong",null,"Generate P States",-1),ci=n(": "),ui={href:"https://github.com/Piker-Alpha/ssdtPRGen.sh",target:"_blank",rel:"noopener noreferrer"},si=n("ssdtPRGen.sh"),hi=n(" (Per Sandy Bridge e IvyBridge)"),pi=i("strong",null,"Generate C States",-1),gi=n(": "),mi={href:"https://github.com/Piker-Alpha/ssdtPRGen.sh",target:"_blank",rel:"noopener noreferrer"},fi=n("ssdtPRGen.sh"),bi=n(" (Per Sandy Bridge e IvyBridge)"),vi=o('<h2 id="boot" tabindex="-1"><a class="header-anchor" href="#boot" aria-hidden="true">#</a> Boot</h2><h3 id="boot-argument" tabindex="-1"><a class="header-anchor" href="#boot-argument" aria-hidden="true">#</a> Boot Argument</h3><ul><li><code>NVRAM -&gt; Add -&gt; 7C436110-AB2A-4BBB-A880-FE41995C9F82 -&gt; Argomenti di avvio</code></li></ul><h3 id="neverhibernate" tabindex="-1"><a class="header-anchor" href="#neverhibernate" aria-hidden="true">#</a> NeverHibernate</h3><ul><li><code>Misc -&gt; Boot -&gt; HibernateMode -&gt; None</code></li></ul><h3 id="default-boot-volume" tabindex="-1"><a class="header-anchor" href="#default-boot-volume" aria-hidden="true">#</a> Default Boot Volume</h3><ul><li><code>Misc -&gt; Security -&gt; AllowSetDefault -&gt; True</code><ul><li>Premi Ctrl+Enter nel picker per impostare il dispositivo di avvio predefinito</li></ul></li><li>L&#39;alternativa è Disco di Avvio nelle Preferenze di Sistema di macOS, come nei veri Mac</li></ul><h2 id="boot-graphics" tabindex="-1"><a class="header-anchor" href="#boot-graphics" aria-hidden="true">#</a> Boot Graphics</h2><h3 id="defaultbackgroundcolor" tabindex="-1"><a class="header-anchor" href="#defaultbackgroundcolor" aria-hidden="true">#</a> DefaultBackgroundColor</h3><ul><li><code>NVRAM -&gt; Add -&gt; 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 -&gt; DefaultBackgroundColor</code><ul><li><code>00000000</code>: Syrah Black</li><li><code>BFBFBF00</code>: Light Gray</li><li>Per calcolare il tuo, converti un valore <code>RGB</code> in <code>HEX</code></li></ul></li></ul><h3 id="efiloginhidpi" tabindex="-1"><a class="header-anchor" href="#efiloginhidpi" aria-hidden="true">#</a> EFILoginHiDPI</h3><ul><li>Flag presente solo su Clover, per lo scaling della UI di OpenCore vedi UIScale e <code>UEFI -&gt; Output</code></li></ul><h3 id="flagstate" tabindex="-1"><a class="header-anchor" href="#flagstate" aria-hidden="true">#</a> flagstate</h3><ul><li><code>NVRAM -&gt; Add -&gt; 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 -&gt; flagstate | Data | &lt;&gt;</code><ul><li>0 -&gt; <code>&lt;00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000</code> (ricavato da un mac)</li><li>La location della NVRAM deve essere controllata più volte per questa opzione</li></ul></li></ul><h3 id="uiscale" tabindex="-1"><a class="header-anchor" href="#uiscale" aria-hidden="true">#</a> UIScale</h3><ul><li><code>NVRAM -&gt; Add -&gt; 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 -&gt; UIScale | Data | &lt;&gt;</code><ul><li>1 -&gt; <code>&lt;01&gt;</code></li><li>2 -&gt; <code>&lt;02&gt;</code></li></ul></li></ul><h2 id="cpu" tabindex="-1"><a class="header-anchor" href="#cpu" aria-hidden="true">#</a> CPU</h2><h3 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> Type</h3>',18),Pi=i("li",null,[i("code",null,"PlatformInfo -> Generic -> ProcessorType")],-1),Si=n("Vedi "),Ci={href:"https://github.com/acidanthera/OpenCorePkg/blob/master/Include/Apple/IndustryStandard/AppleSmBios.h",target:"_blank",rel:"noopener noreferrer"},Ai=n("AppleSmBios.h"),xi=n(" per tutti i valori supportati"),Ii=i("h3",{id:"hwpenable",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#hwpenable","aria-hidden":"true"},"#"),n(" HWPEnable")],-1),ki=n("Migliore alternativa è modificare il "),Di=i("code",null,"MSR 0x770",-1),_i=n(" con "),Fi={href:"https://github.com/headkaze/HWPEnable",target:"_blank",rel:"noopener noreferrer"},Ei=n("HWPEnable"),Bi=i("h3",{id:"qemu",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#qemu","aria-hidden":"true"},"#"),n(" QEMU")],-1),Ti=i("p",null,"Supporto per corrette VM/KVM è implementato in OpenCore",-1),Mi=i("h3",{id:"turbodisable",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#turbodisable","aria-hidden":"true"},"#"),n(" TurboDisable")],-1),Ri=n("Migliore alternativa è controllare le frequenze con "),yi={href:"https://github.com/acidanthera/CPUFriend",target:"_blank",rel:"noopener noreferrer"},Ui=n("CPUFriend"),Li=n(" o "),Gi={href:"https://github.com/Piker-Alpha/ssdtPRGen.sh",target:"_blank",rel:"noopener noreferrer"},Hi=n("ssdtPRGen"),Ni=o('<h2 id="devices" tabindex="-1"><a class="header-anchor" href="#devices" aria-hidden="true">#</a> Devices</h2><h3 id="usb" tabindex="-1"><a class="header-anchor" href="#usb" aria-hidden="true">#</a> USB</h3><ul><li>FixOwnership: <code>UEFI -&gt; Quirk -&gt; ReleaseUsbOwnership</code></li><li>ClockID: <code>DeviceProperties -&gt; Add -&gt; PciRoot... -&gt; AAPL,clock-id</code></li><li>HighCurrent: <code>DeviceProperties -&gt; Add -&gt; PciRoot... -&gt; AAPL, HighCurrent</code><ul><li>Irrilevante per OS X 10.11 o più recenti</li><li>Una nuova variante può essere anche PowerProperties definita in <code>IOUSBHostFamily.kext -&gt; AppleUSBHostPlatformProperties</code> o aggiunta con un SSDT USBX in SMBIOS Skylake e più recenti</li></ul></li></ul><h3 id="audio" tabindex="-1"><a class="header-anchor" href="#audio" aria-hidden="true">#</a> Audio</h3>',4),Oi=n("Per questo, dovrai conoscere il PciRoot per il tuo audio controller e il suo nome (comunemente come HDEF, ma anche HDAS, HDAU e simili), lo puoi trovare con "),Vi={href:"https://github.com/acidanthera/gfxutil/releases",target:"_blank",rel:"noopener noreferrer"},wi=n("gfxutil"),Ki=n(":"),ji=i("div",{class:"language-text ext-text line-numbers-mode"},[i("pre",{class:"language-text"},[i("code",null,"path/to/gfxutil -f HDEF\n")]),i("div",{class:"line-numbers"},[i("span",{class:"line-number"},"1"),i("br")])],-1),zi=i("li",null,[n("Inietta: "),i("code",null,"DeviceProperties -> Add -> PciRoot... -> layout-id")],-1),Wi=i("li",null,[n("AFGLowPowerState: "),i("code",null,"DeviceProperties -> Add -> PciRoot... -> AFGLowPowerState -> <01000000>")],-1),qi=n("ResetHDA: "),Xi=i("code",null,"UEFI -> Audio -> ResetTrafficClass",-1),Qi=n("C'è anche il boot-arg di AppleALC "),Yi=i("code",null,"alctsel=1",-1),Zi=n(" oppure "),Ji={href:"https://github.com/fewtarius/jackfix",target:"_blank",rel:"noopener noreferrer"},$i=n("JackFix"),er=o('<h3 id="add-properties" tabindex="-1"><a class="header-anchor" href="#add-properties" aria-hidden="true">#</a> Add Properties</h3><ul><li>Nessun equivalente, devi specificare la path PciRoot</li></ul><h3 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h3><ul><li><code>DeviceProperties -&gt; Add</code></li></ul><h3 id="fakeid" tabindex="-1"><a class="header-anchor" href="#fakeid" aria-hidden="true">#</a> FakeID</h3>',5),lr=n("Per i seguenti, devi conoscere la PciRoot per il tuo dispositivo e applicare le loro proprietà con "),ar=i("code",null,"DeviceProperties -> Add",-1),ir=n(", PciRoot lo puoi trovare con "),rr={href:"https://github.com/acidanthera/gfxutil/releases",target:"_blank",rel:"noopener noreferrer"},tr=n("gfxutil"),nr=o('<ul><li><p><strong>USB</strong></p><ul><li><code>device-id</code></li><li><code>device_type</code></li><li><code>device_type</code></li></ul></li><li><p><strong>IMEI</strong></p><ul><li><code>device-id</code></li><li><code>vendor-id</code></li></ul></li><li><p><strong>WIFI</strong></p><ul><li><code>name</code></li><li><code>compatible</code></li></ul></li><li><p><strong>LAN</strong></p><ul><li><code>device-id</code></li><li><code>compatible</code></li><li><code>vendor-id</code></li></ul></li><li><p><strong>XHCI</strong></p><ul><li><code>device-id</code></li><li><code>device_type: UHCI</code></li><li><code>device_type: OHCI</code></li></ul></li></ul><p>device_type: EHCI</p><ul><li><code>device-id</code></li><li><code>AAPL,current-available</code></li><li><code>AAPL,current-extra</code></li><li><code>AAPL,current-available</code></li><li><code>AAPL,current-extra</code></li><li><code>AAPL,current-in-sleep</code></li><li><code>built-in</code></li></ul><p>device_type: XHCI</p><ul><li><code>device-id</code></li><li><code>AAPL,current-available</code></li><li><code>AAPL,current-extra</code></li><li><code>AAPL,current-available</code></li><li><code>AAPL,current-in-sleep</code></li><li><code>built-in</code></li></ul><h3 id="forcehpet" tabindex="-1"><a class="header-anchor" href="#forcehpet" aria-hidden="true">#</a> ForceHPET</h3><ul><li><code>UEFI -&gt; Quirks -&gt; ActivateHpetSupport</code></li></ul><h2 id="disable-drivers" tabindex="-1"><a class="header-anchor" href="#disable-drivers" aria-hidden="true">#</a> Disable Drivers</h2><p>Semplicemente non aggiungere i tuoi driver in <code>UEFI -&gt; Drivers</code>, oppure aggiungi <code>#</code> davanti al nome del driver nel config.plist per farlo saltare a OpenCore.</p><h2 id="gui" tabindex="-1"><a class="header-anchor" href="#gui" aria-hidden="true">#</a> Gui</h2><h2 id="graphics" tabindex="-1"><a class="header-anchor" href="#graphics" aria-hidden="true">#</a> Graphics</h2><ul><li>Nota: dovresti rimpiazzarlo con PciRoot...</li></ul><h3 id="injectintel" tabindex="-1"><a class="header-anchor" href="#injectintel" aria-hidden="true">#</a> InjectIntel</h3>',13),or=n("GMA Patching (EN)"),dr=o('<h3 id="injectati" tabindex="-1"><a class="header-anchor" href="#injectati" aria-hidden="true">#</a> InjectAti</h3><ul><li><code>DeviceProperties -&gt; Add -&gt; PciRoot... -&gt; device-id</code><ul><li><code>&lt;B0670000&gt;</code> per R9 390X</li></ul></li><li><code>DeviceProperties -&gt; Add -&gt; PciRoot... -&gt; @0,connector-type</code><ul><li>Dovresti aggiungere i seguenti Connettori (ie. @1,connector-type, @2,connector-type) per il numero di porte che hai. Vedi qui per il numero corrispondente al connettore:</li></ul></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>LVDS                    &lt;02 00 00 00&gt;\nDVI (Dual Link)         &lt;04 00 00 00&gt;\nDVI (Single Link)       &lt;00 02 00 00&gt;\nVGA                     &lt;10 00 00 00&gt;\nS-Video                 &lt;80 00 00 00&gt;\nDP                      &lt;00 04 00 00&gt;\nHDMI                    &lt;00 08 00 00&gt;\nDUMMY                   &lt;01 00 00 00&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="injectnvidia" tabindex="-1"><a class="header-anchor" href="#injectnvidia" aria-hidden="true">#</a> InjectNvidia</h3>',4),cr=n("Nvidia Patching (EN)"),ur=o('<h3 id="fakeintel" tabindex="-1"><a class="header-anchor" href="#fakeintel" aria-hidden="true">#</a> FakeIntel</h3><ul><li><code>DeviceProperties -&gt; Add -&gt; PciRoot(0x0)/Pci(0x2,0x0) -&gt; device-id</code><ul><li><code>66010003</code> per HD 4000</li></ul></li><li><code>DeviceProperties -&gt; Add -&gt; PciRoot(0x0)/Pci(0x2,0x0) -&gt; vendor-id -&gt; &lt;86800000&gt;</code></li></ul><h3 id="fakeati" tabindex="-1"><a class="header-anchor" href="#fakeati" aria-hidden="true">#</a> FakeAti</h3><ul><li><code>DeviceProperties -&gt; Add -&gt; PciRoot... -&gt; device-id</code><ul><li><code>&lt;B0670000&gt;</code> per R9 390X</li></ul></li><li><code>DeviceProperties -&gt; Add -&gt; PciRoot... -&gt; ATY,DeviceID</code><ul><li><code>&lt;B067&gt;</code> per R9 390X</li></ul></li><li><code>DeviceProperties -&gt; Add -&gt; PciRoot... -&gt; @0,compatible</code><ul><li><code>ATY,Elodea</code> per HD 6970M</li></ul></li><li><code>DeviceProperties -&gt; Add -&gt; PciRoot... -&gt; vendor-id-&gt; &lt;02100000&gt;</code></li><li><code>DeviceProperties -&gt; Add -&gt; PciRoot... -&gt; ATY,VendorID -&gt; &lt;0210&gt;</code></li></ul>',4),sr=i("strong",null,"Nota",-1),hr=n(": Vedi qui per fare un SSDT per fare lo Spoofing della GPU, la iniezione via DeviceProperties sembra fallire alcune volte quando tenti di usare lo spoof della GPU: "),pr=n("Renaming GPUs"),gr=n(" Per altri InjectAti, vedi il "),mr={href:"https://github.com/acidanthera/WhateverGreen/blob/master/Manual/Sample.dsl",target:"_blank",rel:"noopener noreferrer"},fr=n("Sample.dsl"),br=n(" nelle documentazioni di WhateverGreen"),vr=i("h3",{id:"custom-edid",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#custom-edid","aria-hidden":"true"},"#"),n(" Custom EDID")],-1),Pr={href:"https://github.com/acidanthera/WhateverGreen/blob/master/Manual/FAQ.IntelHD.en.md#edid",target:"_blank",rel:"noopener noreferrer"},Sr=n("WhateverGreen's EDID docs (EN)"),Cr=o('<h3 id="dual-link" tabindex="-1"><a class="header-anchor" href="#dual-link" aria-hidden="true">#</a> Dual Link</h3><ul><li><code>DeviceProperties -&gt; Add -&gt; PciRoot... -&gt; AAPL00,DualLink</code><ul><li>1 -&gt; <code>&lt;01000000&gt;</code></li><li>0 -&gt; <code>&lt;00000000&gt;</code></li></ul></li></ul><h3 id="nvcap" tabindex="-1"><a class="header-anchor" href="#nvcap" aria-hidden="true">#</a> NVCAP</h3>',3),Ar=n("Nvidia Patching (EN)"),xr=i("h3",{id:"display-cfg",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#display-cfg","aria-hidden":"true"},"#"),n(" display-cfg")],-1),Ir=i("li",null,[i("code",null,"DeviceProperties -> Add -> PciRoot... -> @0,display-cfg")],-1),kr=n("Vedi il post di fassl riguardo a questo: "),Dr={href:"https://www.insanelymac.com/forum/topic/215236-nvidia-injection/",target:"_blank",rel:"noopener noreferrer"},_r=n("Nvidia injection (EN)"),Fr=i("h3",{id:"loadvbios",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#loadvbios","aria-hidden":"true"},"#"),n(" LoadVBios")],-1),Er=n("Vedi "),Br={href:"https://github.com/acidanthera/WhateverGreen/blob/master/Manual/Sample.dsl",target:"_blank",rel:"noopener noreferrer"},Tr=n("sample.dsl"),Mr=n(" per maggiori informazioni su una iniezione personalizzata del VBIOS"),Rr=o('<h3 id="patchvbios" tabindex="-1"><a class="header-anchor" href="#patchvbios" aria-hidden="true">#</a> PatchVBios</h3><p>Vedi LoadVBIOS</p><h3 id="nvidiageneric" tabindex="-1"><a class="header-anchor" href="#nvidiageneric" aria-hidden="true">#</a> NvidiaGeneric</h3><ul><li><code>DeviceProperties -&gt; Add -&gt; PciRoot... -&gt; model | string | Add the GPU name</code></li></ul><h3 id="nvidiasingle" tabindex="-1"><a class="header-anchor" href="#nvidiasingle" aria-hidden="true">#</a> NvidiaSingle</h3>',5),yr=n("Vedi "),Ur=n("disabling unsupported GPUs (EN)"),Lr=i("h3",{id:"nvidianoefi",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#nvidianoefi","aria-hidden":"true"},"#"),n(" NvidiaNoEFI")],-1),Gr=i("li",null,[i("code",null,"DeviceProperties -> Add -> PciRoot... -> NVDA,noEFI | Boolean | True")],-1),Hr=n("Vedi il commento di FredWst per maggiori informazioni: "),Nr={href:"https://www.insanelymac.com/forum/topic/306156-clover-problems-and-solutions/?do=findComment&comment=2443062",target:"_blank",rel:"noopener noreferrer"},Or=n("GT 640 scramble (EN)"),Vr=o('<h3 id="ig-platform-id" tabindex="-1"><a class="header-anchor" href="#ig-platform-id" aria-hidden="true">#</a> ig-platform-id</h3><ul><li><code>DeviceProperties -&gt; Add -&gt; PciRoot(0x0)/Pci(0x2,0x0) -&gt; APPL,ig-platform-id</code></li></ul><h3 id="bootdisplay" tabindex="-1"><a class="header-anchor" href="#bootdisplay" aria-hidden="true">#</a> BootDisplay</h3><ul><li><code>DeviceProperties -&gt; Add -&gt; PciRoot... -&gt; @0,AAPL,boot-display</code></li></ul><h3 id="radeondeinit" tabindex="-1"><a class="header-anchor" href="#radeondeinit" aria-hidden="true">#</a> RadeonDeInit</h3><p>Nella maggior parte dei casi è possibile usare WhateverGreen, dato che se ne occupa automaticamente. Questo SSDT non è necessario se WhateverGreen è usato.</p>',6),wr={href:"https://github.com/dortania/OpenCore-Install-Guide/blob/master/extra-files/Radeon-Deinit-SSDT.dsl",target:"_blank",rel:"noopener noreferrer"},Kr=n("Radeon-Denit-SSDT"),jr=i("ul",null,[i("li",null,"Viene usato di default per GFX0, sistemalo per il tuo sistema")],-1),zr=o('<h2 id="kernel-and-kext-patches" tabindex="-1"><a class="header-anchor" href="#kernel-and-kext-patches" aria-hidden="true">#</a> Kernel and Kext Patches</h2><h3 id="kernelpm" tabindex="-1"><a class="header-anchor" href="#kernelpm" aria-hidden="true">#</a> KernelPm</h3><ul><li><code>Kernel -&gt; Quirks -&gt; AppleXcpmCfgLock -&gt; YES</code></li><li>Nota che Clover applicherà questa patch automaticamente, senza controllare se MSR E2 era bloccato, perciò forse potresti non aver bisogno di questo quirk anche se Clover lo richiedeva</li></ul><h3 id="appleintelcpupm" tabindex="-1"><a class="header-anchor" href="#appleintelcpupm" aria-hidden="true">#</a> AppleIntelCPUPM</h3><ul><li><code>Kernel -&gt; Quirks -&gt; AppleCpuPmCfgLock -&gt; YES</code></li></ul><h3 id="dellsmbiospatch" tabindex="-1"><a class="header-anchor" href="#dellsmbiospatch" aria-hidden="true">#</a> DellSMBIOSPatch</h3><p>Una strana quirk per i sistemi Dell che usano APTIO V</p><ul><li><code>Kernel -&gt; Quirks -&gt; CustomSMBIOSGuid -&gt; YES</code></li><li><code>PlatformInfo -&gt; UpdateSMBIOSMode -&gt; Custom</code></li></ul><h3 id="kextstopatch" tabindex="-1"><a class="header-anchor" href="#kextstopatch" aria-hidden="true">#</a> KextsToPatch</h3>',9),Wr=i("li",null,[i("code",null,"Kernel -> Patch")],-1),qr=n("Vedi "),Xr=n("Conversione delle patch comuni di Kernel e Kext"),Qr=n(" per comuni conversioni delle patch"),Yr=i("h3",{id:"kerneltopatch",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#kerneltopatch","aria-hidden":"true"},"#"),n(" KernelToPatch")],-1),Zr=i("li",null,[i("code",null,"Kernel -> Patch")],-1),Jr=n("Vedi "),$r=n("Conversione delle patch comuni di Kernel e Kext"),et=n(" per comuni conversioni delle patch"),lt=o('<h3 id="forcekextstoload" tabindex="-1"><a class="header-anchor" href="#forcekextstoload" aria-hidden="true">#</a> ForceKextsToLoad</h3><ul><li><code>Kernel -&gt; Force</code></li></ul><h3 id="kernel-lapic" tabindex="-1"><a class="header-anchor" href="#kernel-lapic" aria-hidden="true">#</a> Kernel LAPIC</h3><ul><li><code>Kernel -&gt; Quirks -&gt; LapicKernelPanic -&gt; YES</code></li></ul><h3 id="kernelxcpm" tabindex="-1"><a class="header-anchor" href="#kernelxcpm" aria-hidden="true">#</a> KernelXCPM</h3><ul><li><code>Kernel -&gt; Quirks -&gt; AppleXcpmExtraMsrs -&gt; YES</code></li></ul>',6),at=n("Per una lista completa di patch, per favore confronta "),it={href:"https://github.com/acidanthera/OpenCorePkg/blob/master/Library/OcAppleKernelLib/CommonPatches.c",target:"_blank",rel:"noopener noreferrer"},rt=n("OpenCore's "),tt=i("code",null,"CommonPatches.c",-1),nt=n(" con "),ot={href:"https://github.com/CloverHackyColor/CloverBootloader/blob/master/rEFIt_UEFI/Platform/kernel_patcher.cpp",target:"_blank",rel:"noopener noreferrer"},dt=n("Clover's kernel_patcher.c"),ct=n(". Alcune patch non sono trasferite perciò se devi usarne una, puoi farlo liberamente. Nell'esempio convertiamo il "),ut={href:"https://github.com/CloverHackyColor/CloverBootloader/tree/1a02f530db91fdfa6880295b6a8b3f096c29e7cc/rEFIt_UEFI/Platform/kernel_patcher.cpp#L1617-L1719",target:"_blank",rel:"noopener noreferrer"},st=i("code",null,"KernelIvyBridgeXCPM()",-1),ht=n(" per OpenCore:"),pt=o('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Base: _xcpm_bootstrap\nComment: _xcpm_bootstrap (Ivy Bridge) 10.15\nCount: 1\nEnabled: YES\nFind: 8D43C43C22\nIdentifier: kernel\nLimit: 0\nMask: FFFF00FFFF\nMinKernel: 19.\nMaxKernel: 19.99.99\nReplace: 8D43C63C22\nReplaceMask: 0000FF0000\nSkip: 0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',1),gt={href:"https://github.com/khronokernel/OpenCore-Vanilla-Desktop-Guide/issues/32",target:"_blank",rel:"noopener noreferrer"},mt=n("Fonte"),ft=n("Per Haswell+ Low end come Celeron, consulta qui per le patch raccomandate: "),bt={href:"https://github.com/acidanthera/bugtracker/issues/365",target:"_blank",rel:"noopener noreferrer"},vt=n("Bugtracker Issues 365 (EN)"),Pt=o('<h3 id="usb-port-limit-patches" tabindex="-1"><a class="header-anchor" href="#usb-port-limit-patches" aria-hidden="true">#</a> USB Port Limit Patches</h3><ul><li><code>Kernel -&gt; Quirks -&gt; XhciPortLimit -&gt; YES</code></li></ul><h3 id="external-icons-patch" tabindex="-1"><a class="header-anchor" href="#external-icons-patch" aria-hidden="true">#</a> External Icons Patch</h3><ul><li><code>Kernel -&gt; Quirks -&gt; ExternalDiskIcons -&gt; YES</code></li><li>Usato quando il tuo disco interno segnato come esterno su macOS</li></ul><h3 id="applertc" tabindex="-1"><a class="header-anchor" href="#applertc" aria-hidden="true">#</a> AppleRTC</h3><p>Problemi con AppleRTC, piccolo fix:</p><ul><li>config.plist -&gt; Kernel -&gt; Quirks -&gt; DisableRtcChecksum -&gt; true</li></ul>',7),St=i("strong",null,"Nota",-1),Ct=n(": Se continui ad avere problemi, devi usare "),At={href:"https://github.com/acidanthera/RTCMemoryFixup/releases",target:"_blank",rel:"noopener noreferrer"},xt=n("RTCMemoryFixup"),It=n(" ed escludere i casi limite. Vedi "),kt={href:"https://github.com/acidanthera/bugtracker/issues/788#issuecomment-604608329",target:"_blank",rel:"noopener noreferrer"},Dt=n("qui per maggiori info (EN)"),_t=o('<p>I seguenti boot-arg dovrebbero risolvere il 99% dei casi (in coppia con RTCMemoryFixup):</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>rtcfx_exclude=00-FF\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Se funziona, questo accorcia la ricerca delle aree da escludere, per trovare la parte di macOS che parte</p><h3 id="fakecpuid" tabindex="-1"><a class="header-anchor" href="#fakecpuid" aria-hidden="true">#</a> FakeCPUID</h3><ul><li><code>Kernel -&gt; Emulate</code>: <ul><li><code>CpuidMask</code>: <code>&lt;Clover_FCPUID_Extended_to_4_bytes_Swapped_Bytes&gt; | 00 00 00 00 | 00 00 00 00 | 00 00 00 00</code><ul><li>es: (<code>0x0306A9</code>): <code>A9060300 00000000 00000000 00000000</code></li></ul></li><li><code>CpuidData</code>(Scambia <code>00</code> con <code>FF</code> se devi scambiarlo con un valore lungo) <ul><li>es: <code>FFFFFFFF 00000000 00000000 00000000</code></li></ul></li></ul></li></ul>',5),Ft=n("Nota: Trovare il CPUID in Intel può essere un po' più difficile che guardare nell'Intel ARK, la via più veloce è di scoprirlo è cercarlo dal sito della Microsoft: "),Et={href:"https://support.microsoft.com/it-it/topic/riepilogo-degli-aggiornamenti-di-microcodice-intel-08c99af2-075a-4e16-1ef1-5f6e4d8637c4",target:"_blank",rel:"noopener noreferrer"},Bt=n("Riepilogo degli aggiornamenti di microcodice Intel"),Tt=o('<h2 id="rt-variables" tabindex="-1"><a class="header-anchor" href="#rt-variables" aria-hidden="true">#</a> Rt Variables</h2><h3 id="rom" tabindex="-1"><a class="header-anchor" href="#rom" aria-hidden="true">#</a> ROM</h3><ul><li>Nessuna traduzione diretta di <code>UseMacAddr0</code> dato che devi provvedere un ROM hardware, lo puoi trovare in <code>Preferenze di Sistema -&gt; Network -&gt; Avanzate -&gt; Hardware</code></li><li>Verifica anche che En0 è ancora built-in quando avvii OpenCore, questo può rompere iMessage e iCloud quando non c&#39;è la proprietà <code>built-in</code> property.</li></ul><h3 id="mlb" tabindex="-1"><a class="header-anchor" href="#mlb" aria-hidden="true">#</a> MLB</h3><ul><li><code>PlatformInfo -&gt; Generic -&gt; MLB</code></li></ul><h3 id="booterconfig" tabindex="-1"><a class="header-anchor" href="#booterconfig" aria-hidden="true">#</a> BooterConfig</h3><ul><li><p><code>NVRAM -&gt; Add -&gt; 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14-&gt; UIScale</code>:</p><ul><li>0x28: <code>Data | &lt;01&gt;</code></li><li>0x2A: <code>Data | &lt;02&gt;</code></li></ul></li></ul><h3 id="csractiveconfig" tabindex="-1"><a class="header-anchor" href="#csractiveconfig" aria-hidden="true">#</a> CsrActiveConfig</h3><ul><li><p><code>NVRAM -&gt; Add -&gt; 7C436110-AB2A-4BBB-A880-FE41995C9F82 -&gt; csr-active-config</code>:</p><ul><li>0x0: <code>00000000</code></li><li>0x3: <code>03000000</code></li><li>0x67: <code>67000000</code></li><li>0x3E7: <code>E7030000</code></li></ul></li></ul><h2 id="smbios" tabindex="-1"><a class="header-anchor" href="#smbios" aria-hidden="true">#</a> SMBIOS</h2><h3 id="product-name" tabindex="-1"><a class="header-anchor" href="#product-name" aria-hidden="true">#</a> Product Name</h3><ul><li><code>PlatformInfo -&gt; Generic -&gt; SystemProductName</code></li></ul><h3 id="serial-number" tabindex="-1"><a class="header-anchor" href="#serial-number" aria-hidden="true">#</a> Serial Number</h3><ul><li><code>PlatformInfo -&gt; Generic -&gt; SystemSerialNumber</code></li></ul><h3 id="board-serial-number" tabindex="-1"><a class="header-anchor" href="#board-serial-number" aria-hidden="true">#</a> Board Serial Number</h3><ul><li><code>PlatformInfo -&gt; Generic -&gt; MLB</code></li></ul><h3 id="smuuid" tabindex="-1"><a class="header-anchor" href="#smuuid" aria-hidden="true">#</a> SmUUID</h3><ul><li><code>PlatformInfo -&gt; Generic -&gt; SystemUUID</code></li></ul><h3 id="memory" tabindex="-1"><a class="header-anchor" href="#memory" aria-hidden="true">#</a> Memory</h3>',19),Mt=i("li",null,[i("code",null,"PlatformInfo -> CustomMemory -> True")],-1),Rt=i("code",null,"PlatformInfo -> Memory",-1),yt=n("Vedi "),Ut={href:"https://github.com/acidanthera/OpenCorePkg/blob/master/Docs/Configuration.pdf",target:"_blank",rel:"noopener noreferrer"},Lt=n("Configuration.pdf (EN)"),Gt=n(" per maggiori informazioni"),Ht=o('<h3 id="slots-aapl-injection" tabindex="-1"><a class="header-anchor" href="#slots-aapl-injection" aria-hidden="true">#</a> Slots AAPL Injection</h3><ul><li><code>DeviceProperties -&gt; Add -&gt; PciRoot... -&gt; APPL,slot-name | string | Add slot</code></li></ul><h2 id="system-parameters" tabindex="-1"><a class="header-anchor" href="#system-parameters" aria-hidden="true">#</a> System Parameters</h2><h3 id="customuuid" tabindex="-1"><a class="header-anchor" href="#customuuid" aria-hidden="true">#</a> CustomUUID</h3>',4),Nt=i("li",null,"Deprecato da molto e non raccomandato neanche su Clover, nessun equivalente su OpenCore",-1),Ot=n("Più info: "),Vt={href:"https://github.com/acidanthera/bugtracker/issues/711",target:"_blank",rel:"noopener noreferrer"},wt=n("Hardware UUID injection for OpenCore #711"),Kt=o('<h3 id="injectsystemid" tabindex="-1"><a class="header-anchor" href="#injectsystemid" aria-hidden="true">#</a> InjectSystemID</h3><ul><li>Anche questo legacy dato che viene usato per replicare l&#39;UUID degli utenti Chameleon</li></ul><h3 id="backlightlevel" tabindex="-1"><a class="header-anchor" href="#backlightlevel" aria-hidden="true">#</a> BacklightLevel</h3><ul><li>Impostato correttemente in NVRAM</li><li><code>NVRAM -&gt; Add -&gt; 7C436110-AB2A-4BBB-A880-FE41995C9F82 -&gt; backlight-level | Data | &lt;Insert value&gt;</code><ul><li>0x0101 -&gt; <code>&lt;0101&gt;</code></li></ul></li></ul><h3 id="injectkexts" tabindex="-1"><a class="header-anchor" href="#injectkexts" aria-hidden="true">#</a> InjectKexts</h3><ul><li>Nessun equivalente ma non hai alcuna scusa per tenere FakeSMC dentro macOS</li></ul><h3 id="nocaches" tabindex="-1"><a class="header-anchor" href="#nocaches" aria-hidden="true">#</a> NoCaches</h3><ul><li>Questo funziona fino a 10.7 su Clover, e OpenCore richiede un sistema che supporta prelinked (10.7) perciò non ci può essere un equivalente</li></ul><h3 id="exposesysvariables" tabindex="-1"><a class="header-anchor" href="#exposesysvariables" aria-hidden="true">#</a> ExposeSysVariables</h3><ul><li>Aggiungi semplicemente le tue proprietà SMBIOS in <code>PlatformInfo</code></li><li>Quirk confusionale, non viene nemmeno menzionata documentazioni delle versioni più recenti di Clover (AppleLife)</li></ul><h3 id="nvidiaweb" tabindex="-1"><a class="header-anchor" href="#nvidiaweb" aria-hidden="true">#</a> NvidiaWeb</h3><ul><li>Questo applica <code>sudo nvram nvda_drv=1</code> ad ogni boot. Per ottenere simili effetti devi aggiungere il seguente path:</li><li><code>NVRAM -&gt; Add -&gt; 7C436110-AB2A-4BBB-A880-FE41995C9F82 -&gt; nvda_drv: &lt;31&gt;</code></li></ul><h2 id="status" tabindex="-1"><a class="header-anchor" href="#status" aria-hidden="true">#</a> Status</h2><p><strong>Sezione finite al 100%</strong>:</p><ul><li>Boot Graphics</li><li>Disable Drivers</li><li>KernelAndKextPatches</li><li>RTVariables</li><li>SMBIOS</li><li>SystemParameters</li></ul><p><strong>Sezioni finite per la maggior parte</strong>:</p><ul><li>Acpi</li><li>Boot</li><li>CPU</li><li>Device</li></ul><p><strong>Sezioni mancanti</strong>:</p><ul><li>GUI</li></ul>',19);d.render=function(n,o){const d=e("RouterLink"),jt=e("OutboundLink");return l(),a(t,null,[c,u,i("nav",s,[i("ul",null,[i("li",null,[i(d,{to:"#kext-e-driver-firmware"},{default:r((()=>[h])),_:1})]),i("li",null,[i(d,{to:"#acpi"},{default:r((()=>[p])),_:1}),i("ul",null,[i("li",null,[i(d,{to:"#acpi-renames"},{default:r((()=>[g])),_:1})]),i("li",null,[i(d,{to:"#patches"},{default:r((()=>[m])),_:1})]),i("li",null,[i(d,{to:"#fixes"},{default:r((()=>[f])),_:1})]),i("li",null,[i(d,{to:"#ssdts"},{default:r((()=>[b])),_:1})])])]),i("li",null,[i(d,{to:"#boot"},{default:r((()=>[v])),_:1}),i("ul",null,[i("li",null,[i(d,{to:"#boot-argument"},{default:r((()=>[P])),_:1})]),i("li",null,[i(d,{to:"#neverhibernate"},{default:r((()=>[S])),_:1})]),i("li",null,[i(d,{to:"#default-boot-volume"},{default:r((()=>[C])),_:1})])])]),i("li",null,[i(d,{to:"#boot-graphics"},{default:r((()=>[A])),_:1}),i("ul",null,[i("li",null,[i(d,{to:"#defaultbackgroundcolor"},{default:r((()=>[x])),_:1})]),i("li",null,[i(d,{to:"#efiloginhidpi"},{default:r((()=>[I])),_:1})]),i("li",null,[i(d,{to:"#flagstate"},{default:r((()=>[k])),_:1})]),i("li",null,[i(d,{to:"#uiscale"},{default:r((()=>[D])),_:1})])])]),i("li",null,[i(d,{to:"#cpu"},{default:r((()=>[_])),_:1}),i("ul",null,[i("li",null,[i(d,{to:"#type"},{default:r((()=>[F])),_:1})]),i("li",null,[i(d,{to:"#hwpenable"},{default:r((()=>[E])),_:1})]),i("li",null,[i(d,{to:"#qemu"},{default:r((()=>[B])),_:1})]),i("li",null,[i(d,{to:"#turbodisable"},{default:r((()=>[T])),_:1})])])]),i("li",null,[i(d,{to:"#devices"},{default:r((()=>[M])),_:1}),i("ul",null,[i("li",null,[i(d,{to:"#usb"},{default:r((()=>[R])),_:1})]),i("li",null,[i(d,{to:"#audio"},{default:r((()=>[y])),_:1})]),i("li",null,[i(d,{to:"#add-properties"},{default:r((()=>[U])),_:1})]),i("li",null,[i(d,{to:"#properties"},{default:r((()=>[L])),_:1})]),i("li",null,[i(d,{to:"#fakeid"},{default:r((()=>[G])),_:1})]),i("li",null,[i(d,{to:"#forcehpet"},{default:r((()=>[H])),_:1})])])]),i("li",null,[i(d,{to:"#disable-drivers"},{default:r((()=>[N])),_:1})]),i("li",null,[i(d,{to:"#gui"},{default:r((()=>[O])),_:1})]),i("li",null,[i(d,{to:"#graphics"},{default:r((()=>[V])),_:1}),i("ul",null,[i("li",null,[i(d,{to:"#injectintel"},{default:r((()=>[w])),_:1})]),i("li",null,[i(d,{to:"#injectati"},{default:r((()=>[K])),_:1})]),i("li",null,[i(d,{to:"#injectnvidia"},{default:r((()=>[j])),_:1})]),i("li",null,[i(d,{to:"#fakeintel"},{default:r((()=>[z])),_:1})]),i("li",null,[i(d,{to:"#fakeati"},{default:r((()=>[W])),_:1})]),i("li",null,[i(d,{to:"#custom-edid"},{default:r((()=>[q])),_:1})]),i("li",null,[i(d,{to:"#dual-link"},{default:r((()=>[X])),_:1})]),i("li",null,[i(d,{to:"#nvcap"},{default:r((()=>[Q])),_:1})]),i("li",null,[i(d,{to:"#display-cfg"},{default:r((()=>[Y])),_:1})]),i("li",null,[i(d,{to:"#loadvbios"},{default:r((()=>[Z])),_:1})]),i("li",null,[i(d,{to:"#patchvbios"},{default:r((()=>[J])),_:1})]),i("li",null,[i(d,{to:"#nvidiageneric"},{default:r((()=>[$])),_:1})]),i("li",null,[i(d,{to:"#nvidiasingle"},{default:r((()=>[ee])),_:1})]),i("li",null,[i(d,{to:"#nvidianoefi"},{default:r((()=>[le])),_:1})]),i("li",null,[i(d,{to:"#ig-platform-id"},{default:r((()=>[ae])),_:1})]),i("li",null,[i(d,{to:"#bootdisplay"},{default:r((()=>[ie])),_:1})]),i("li",null,[i(d,{to:"#radeondeinit"},{default:r((()=>[re])),_:1})])])]),i("li",null,[i(d,{to:"#kernel-and-kext-patches"},{default:r((()=>[te])),_:1}),i("ul",null,[i("li",null,[i(d,{to:"#kernelpm"},{default:r((()=>[ne])),_:1})]),i("li",null,[i(d,{to:"#appleintelcpupm"},{default:r((()=>[oe])),_:1})]),i("li",null,[i(d,{to:"#dellsmbiospatch"},{default:r((()=>[de])),_:1})]),i("li",null,[i(d,{to:"#kextstopatch"},{default:r((()=>[ce])),_:1})]),i("li",null,[i(d,{to:"#kerneltopatch"},{default:r((()=>[ue])),_:1})]),i("li",null,[i(d,{to:"#forcekextstoload"},{default:r((()=>[se])),_:1})]),i("li",null,[i(d,{to:"#kernel-lapic"},{default:r((()=>[he])),_:1})]),i("li",null,[i(d,{to:"#kernelxcpm"},{default:r((()=>[pe])),_:1})]),i("li",null,[i(d,{to:"#usb-port-limit-patches"},{default:r((()=>[ge])),_:1})]),i("li",null,[i(d,{to:"#external-icons-patch"},{default:r((()=>[me])),_:1})]),i("li",null,[i(d,{to:"#applertc"},{default:r((()=>[fe])),_:1})]),i("li",null,[i(d,{to:"#fakecpuid"},{default:r((()=>[be])),_:1})])])]),i("li",null,[i(d,{to:"#rt-variables"},{default:r((()=>[ve])),_:1}),i("ul",null,[i("li",null,[i(d,{to:"#rom"},{default:r((()=>[Pe])),_:1})]),i("li",null,[i(d,{to:"#mlb"},{default:r((()=>[Se])),_:1})]),i("li",null,[i(d,{to:"#booterconfig"},{default:r((()=>[Ce])),_:1})]),i("li",null,[i(d,{to:"#csractiveconfig"},{default:r((()=>[Ae])),_:1})])])]),i("li",null,[i(d,{to:"#smbios"},{default:r((()=>[xe])),_:1}),i("ul",null,[i("li",null,[i(d,{to:"#product-name"},{default:r((()=>[Ie])),_:1})]),i("li",null,[i(d,{to:"#serial-number"},{default:r((()=>[ke])),_:1})]),i("li",null,[i(d,{to:"#board-serial-number"},{default:r((()=>[De])),_:1})]),i("li",null,[i(d,{to:"#smuuid"},{default:r((()=>[_e])),_:1})]),i("li",null,[i(d,{to:"#memory"},{default:r((()=>[Fe])),_:1})]),i("li",null,[i(d,{to:"#slots-aapl-injection"},{default:r((()=>[Ee])),_:1})])])]),i("li",null,[i(d,{to:"#system-parameters"},{default:r((()=>[Be])),_:1}),i("ul",null,[i("li",null,[i(d,{to:"#customuuid"},{default:r((()=>[Te])),_:1})]),i("li",null,[i(d,{to:"#injectsystemid"},{default:r((()=>[Me])),_:1})]),i("li",null,[i(d,{to:"#backlightlevel"},{default:r((()=>[Re])),_:1})]),i("li",null,[i(d,{to:"#injectkexts"},{default:r((()=>[ye])),_:1})]),i("li",null,[i(d,{to:"#nocaches"},{default:r((()=>[Ue])),_:1})]),i("li",null,[i(d,{to:"#exposesysvariables"},{default:r((()=>[Le])),_:1})]),i("li",null,[i(d,{to:"#nvidiaweb"},{default:r((()=>[Ge])),_:1})])])]),i("li",null,[i(d,{to:"#status"},{default:r((()=>[He])),_:1})])])]),Ne,i("p",null,[Oe,i("a",Ve,[we,i(jt)]),Ke]),je,ze,We,i("ul",null,[i("li",null,[qe,i("a",Xe,[Qe,i(jt)]),Ye,Ze]),i("li",null,[Je,i("a",$e,[el,i(jt)]),ll]),al,i("li",null,[il,i("a",rl,[tl,i(jt)]),nl]),i("li",null,[ol,i("a",dl,[cl,i(jt)]),ul]),i("li",null,[sl,i(d,{to:"/Getting-Started-With-ACPI/"},{default:r((()=>[hl])),_:1}),pl]),i("li",null,[gl,i("a",ml,[fl,i(jt)]),bl]),i("li",null,[vl,i(d,{to:"/Getting-Started-With-ACPI/"},{default:r((()=>[Pl])),_:1}),Sl,Cl]),i("li",null,[Al,i("a",xl,[Il,i(jt)]),kl,Dl]),i("li",null,[_l,i("a",Fl,[El,i(jt)]),Bl]),i("li",null,[Tl,i("ul",null,[i("li",null,[Ml,i("a",Rl,[yl,i(jt)]),Ul]),Ll,Gl,Hl,Nl,Ol])])]),Vl,i("ul",null,[i("li",null,[wl,i("ul",null,[i("li",null,[i("a",Kl,[jl,i(jt)])])])]),i("li",null,[zl,i("ul",null,[i("li",null,[i("a",Wl,[ql,i(jt)]),Xl,Ql])])]),i("li",null,[Yl,i("ul",null,[i("li",null,[i("a",Zl,[Jl,i(jt)])])])]),i("li",null,[$l,i("ul",null,[i("li",null,[i("a",ea,[la,i(jt)])]),i("li",null,[i("a",aa,[ia,ra,ta,na,i(jt)])]),oa])]),da,ca,i("li",null,[ua,i("ul",null,[i("li",null,[i("a",sa,[ha,i(jt)]),pa,ga])])]),ma,i("li",null,[fa,i("ul",null,[i("li",null,[ba,va,Pa,Sa,Ca,i("a",Aa,[xa,i(jt)]),Ia]),i("li",null,[ka,Da,_a,i("a",Fa,[Ea,i(jt)])])])]),i("li",null,[Ba,i("ul",null,[i("li",null,[i("a",Ta,[Ma,i(jt)]),Ra,ya])])]),i("li",null,[Ua,i("ul",null,[i("li",null,[i("a",La,[Ga,i(jt)]),Ha,Na])])]),i("li",null,[Oa,i("ul",null,[i("li",null,[Va,i(d,{to:"/Getting-Started-With-ACPI/Laptops/backlight.html"},{default:r((()=>[wa])),_:1})])])]),i("li",null,[Ka,i("ul",null,[i("li",null,[i("a",ja,[za,i(jt)])])])]),i("li",null,[Wa,i("ul",null,[i("li",null,[i("a",qa,[Xa,i(jt)])]),Qa,i("li",null,[Ya,i("a",Za,[Ja,i(jt)])])])]),$a]),ei,li,ai,i("ul",null,[i("li",null,[ii,i("ul",null,[i("li",null,[i(d,{to:"/Getting-Started-With-ACPI/"},{default:r((()=>[ri])),_:1})]),i("li",null,[ti,i(d,{to:"/Getting-Started-With-ACPI/Universal/plug/"},{default:r((()=>[ni])),_:1}),oi])])]),i("li",null,[i("p",null,[di,ci,i("a",ui,[si,i(jt)]),hi])]),i("li",null,[i("p",null,[pi,gi,i("a",mi,[fi,i(jt)]),bi])])]),vi,i("ul",null,[Pi,i("li",null,[Si,i("a",Ci,[Ai,i(jt)]),xi])]),Ii,i("p",null,[ki,Di,_i,i("a",Fi,[Ei,i(jt)])]),Bi,Ti,Mi,i("p",null,[Ri,i("a",yi,[Ui,i(jt)]),Li,i("a",Gi,[Hi,i(jt)])]),Ni,i("p",null,[Oi,i("a",Vi,[wi,i(jt)]),Ki]),ji,i("ul",null,[zi,Wi,i("li",null,[qi,Xi,i("ul",null,[i("li",null,[Qi,Yi,Zi,i("a",Ji,[$i,i(jt)])])])])]),er,i("p",null,[lr,ar,ir,i("a",rr,[tr,i(jt)])]),nr,i("ul",null,[i("li",null,[i(d,{to:"/OpenCore-Post-Install/gpu-patching/"},{default:r((()=>[or])),_:1})])]),dr,i("ul",null,[i("li",null,[i(d,{to:"/OpenCore-Post-Install/gpu-patching/"},{default:r((()=>[cr])),_:1})])]),ur,i("p",null,[sr,hr,i(d,{to:"/Getting-Started-With-ACPI/Universal/spoof.html"},{default:r((()=>[pr])),_:1}),gr,i("a",mr,[fr,i(jt)]),br]),vr,i("ul",null,[i("li",null,[i("a",Pr,[Sr,i(jt)])])]),Cr,i("ul",null,[i("li",null,[i(d,{to:"/OpenCore-Post-Install/gpu-patching/"},{default:r((()=>[Ar])),_:1})])]),xr,i("ul",null,[Ir,i("li",null,[kr,i("a",Dr,[_r,i(jt)])])]),Fr,i("ul",null,[i("li",null,[Er,i("a",Br,[Tr,i(jt)]),Mr])]),Rr,i("p",null,[yr,i(d,{to:"/OpenCore-Post-Install/"},{default:r((()=>[Ur])),_:1})]),Lr,i("ul",null,[Gr,i("li",null,[Hr,i("a",Nr,[Or,i(jt)])])]),Vr,i("ul",null,[i("li",null,[i("a",wr,[Kr,i(jt)]),jr])]),zr,i("ul",null,[Wr,i("li",null,[qr,i(d,{to:"/clover-conversion/clover-patch.html"},{default:r((()=>[Xr])),_:1}),Qr])]),Yr,i("ul",null,[Zr,i("li",null,[Jr,i(d,{to:"/clover-conversion/clover-patch.html"},{default:r((()=>[$r])),_:1}),et])]),lt,i("p",null,[at,i("a",it,[rt,tt,i(jt)]),nt,i("a",ot,[dt,i(jt)]),ct,i("a",ut,[st,i(jt)]),ht]),pt,i("p",null,[i("a",gt,[mt,i(jt)])]),i("p",null,[ft,i("a",bt,[vt,i(jt)])]),Pt,i("p",null,[St,Ct,i("a",At,[xt,i(jt)]),It,i("a",kt,[Dt,i(jt)])]),_t,i("p",null,[Ft,i("a",Et,[Bt,i(jt)])]),Tt,i("ul",null,[Mt,i("li",null,[Rt,i("ul",null,[i("li",null,[yt,i("a",Ut,[Lt,i(jt)]),Gt])])])]),Ht,i("ul",null,[Nt,i("li",null,[Ot,i("a",Vt,[wt,i(jt)])])]),Kt],64)};export default d;
